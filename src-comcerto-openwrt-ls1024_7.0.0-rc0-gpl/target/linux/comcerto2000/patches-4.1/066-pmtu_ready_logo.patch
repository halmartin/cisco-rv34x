--- a/include/net/ip6_route.h	2017-08-28 17:25:14.149977975 +0530
+++ b/include/net/ip6_route.h	2017-08-28 17:35:45.821975569 +0530
@@ -107,6 +107,11 @@ void rt6_purge_dflt_routers(struct net *
 int rt6_route_rcv(struct net_device *dev, u8 *opt, int len,
 		  const struct in6_addr *gwaddr);
 
+extern void rt6_pmtu_discovery(const struct in6_addr *daddr,
+                        const struct in6_addr *saddr,
+                        struct net_device *dev,
+                        u32 pmtu);
+
 void ip6_update_pmtu(struct sk_buff *skb, struct net *net, __be32 mtu, int oif,
 		     u32 mark);
 void ip6_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, __be32 mtu);
--- a/net/ipv6/route.c	2017-08-28 17:24:57.493978046 +0530
+++ b/net/ipv6/route.c	2017-08-28 17:34:18.645975910 +0530
@@ -1922,6 +1922,115 @@ out:
 	neigh_release(neigh);
 }
 
+
+static void rt6_do_pmtu_disc(const struct in6_addr *daddr, const struct in6_addr *saddr,
+                         struct net *net, u32 pmtu, int ifindex)
+{
+    struct rt6_info *rt, *nrt;
+    int allfrag = 0;
+again:
+    rt = rt6_lookup(net, daddr, saddr, ifindex, 0);
+    if (rt == NULL)
+        return;
+
+    if (rt6_check_expired(rt)) {
+        ip6_del_rt(rt);
+        goto again;
+    }
+
+    if (pmtu >= dst_mtu(&rt->dst))
+        goto out;
+
+    if (pmtu < IPV6_MIN_MTU) {
+        /*
+         * According to RFC2460, PMTU is set to the IPv6 Minimum Link
+         * MTU (1280) and a fragment header should always be included
+         * after a node receiving Too Big message reporting PMTU is
+         * less than the IPv6 Minimum Link MTU.
+        */
+        pmtu = IPV6_MIN_MTU;
+        allfrag = 1;
+    }
+
+    /* New mtu received -> path was valid.
+     * They are sent only in response to data packets,
+     * so that this nexthop apparently is reachable. --ANK
+     * */
+
+    dst_confirm(&rt->dst);
+
+    /* Host route. If it is static, it would be better
+     * not to override it, but add new one, so that
+     * when cache entry will expire old pmtu
+     * would return automatically.
+     * */
+    if (rt->rt6i_flags & RTF_CACHE) {
+        dst_metric_set(&rt->dst, RTAX_MTU, pmtu);
+        if (allfrag) {
+            u32 features = dst_metric(&rt->dst, RTAX_FEATURES);
+            features |= RTAX_FEATURE_ALLFRAG;
+            dst_metric_set(&rt->dst, RTAX_FEATURES, features);
+        }
+        dst_set_expires(&rt->dst, net->ipv6.sysctl.ip6_rt_mtu_expires);
+        rt->rt6i_flags |= RTF_MODIFIED|RTF_EXPIRES;
+        goto out;
+    }
+
+    /* Network route.
+     * Two cases are possible:
+     * 1. It is connected route. Action: COW
+     * 2. It is gatewayed route or NONEXTHOP route. Action: clone it.
+     **/
+    //if (!dst_get_neighbour_raw(&rt->dst) && !(rt->rt6i_flags & RTF_NONEXTHOP))
+    if (!(rt->rt6i_flags & RTF_NONEXTHOP))
+        nrt = rt6_alloc_cow(rt, daddr, saddr);
+    else
+        nrt = rt6_alloc_clone(rt, daddr);
+
+    if (nrt) {
+        dst_metric_set(&nrt->dst, RTAX_MTU, pmtu);
+        if (allfrag) {
+            u32 features = dst_metric(&nrt->dst, RTAX_FEATURES);
+            features |= RTAX_FEATURE_ALLFRAG;
+            dst_metric_set(&nrt->dst, RTAX_FEATURES, features);
+        }
+        /* According to RFC 1981, detecting PMTU increase shouldn't be
+         ** happened within 5 mins, the recommended timer is 10 mins.
+         ** Here this route expiration time is set to ip6_rt_mtu_expires
+         ** which is 10 mins. After 10 mins the decreased pmtu is expired
+         ** and detecting PMTU increase will be automatically happened.
+         **/
+        dst_set_expires(&nrt->dst, net->ipv6.sysctl.ip6_rt_mtu_expires);
+        nrt->rt6i_flags |= RTF_DYNAMIC|RTF_EXPIRES;
+
+        ip6_ins_rt(nrt);
+    }
+out:
+    dst_release(&rt->dst);
+}
+
+
+void rt6_pmtu_discovery(const struct in6_addr *daddr, const struct in6_addr *saddr,
+                    struct net_device *dev, u32 pmtu)
+{
+    struct net *net = dev_net(dev);
+
+    /*
+     * RFC 1981 states that a node "MUST reduce the size of the packets it
+     * is sending along the path" that caused the Packet Too Big message.
+     * Since it's not possible in the general case to determine which
+     * interface was used to send the original packet, we update the MTU
+     * on the interface that will be used to send future packets. We also
+     * update the MTU on the interface that received the Packet Too Big in
+     * case the original packet was forced out that interface with
+     * SO_BINDTODEVICE or similar. This is the next best thing to the
+     * correct behaviour, which would be to update the MTU on all
+     * interfaces.
+     */
+    rt6_do_pmtu_disc(daddr, saddr, net, pmtu, 0);
+    rt6_do_pmtu_disc(daddr, saddr, net, pmtu, dev->ifindex);
+}
+
 /*
  *	Misc support functions
  */
--- a/net/ipv6/icmp.c	2017-08-28 17:24:51.293978062 +0530
+++ b/net/ipv6/icmp.c	2017-08-28 17:34:11.805975941 +0530
@@ -678,6 +678,7 @@ static int icmpv6_rcv(struct sk_buff *sk
 	struct inet6_dev *idev = __in6_dev_get(dev);
 	const struct in6_addr *saddr, *daddr;
 	struct icmp6hdr *hdr;
+    const struct ipv6hdr *orig_hdr;
 	u8 type;
 	bool success = false;
 
@@ -739,7 +740,9 @@ static int icmpv6_rcv(struct sk_buff *sk
 		if (!pskb_may_pull(skb, sizeof(struct ipv6hdr)))
 			goto discard_it;
 		hdr = icmp6_hdr(skb);
-
+        orig_hdr = (struct ipv6hdr *) (hdr + 1);
+        rt6_pmtu_discovery(&orig_hdr->daddr, &orig_hdr->saddr, dev,
+                                ntohl(hdr->icmp6_mtu));
 		/*
 		 *	Drop through to notify
 		 */
