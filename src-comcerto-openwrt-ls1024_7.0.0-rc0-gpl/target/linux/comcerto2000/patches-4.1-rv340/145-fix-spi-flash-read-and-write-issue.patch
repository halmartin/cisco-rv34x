# 10-03-2017: harry.lin <harry.lin@deltaww.com>
# Fix SPI FLASH read and write issue.
--- linux-4.1.8/drivers/mtd/spi-nor/spi-nor.c.org	2017-03-10 11:20:25.330670935 +0800
+++ linux-4.1.8/drivers/mtd/spi-nor/spi-nor.c	2017-03-10 14:09:03.011921485 +0800
@@ -816,36 +816,7 @@
 	if (ret)
 		return ret;
 
-	write_enable(nor);
-
-	page_offset = to & (nor->page_size - 1);
-
-	/* do all the bytes fit onto one page? */
-	if (page_offset + len <= nor->page_size) {
-		nor->write(nor, to, len, retlen, buf);
-	} else {
-		/* the size of data remaining on the first page */
-		page_size = nor->page_size - page_offset;
-		nor->write(nor, to, page_size, retlen, buf);
-
-		/* write everything in nor->page_size chunks */
-		for (i = page_size; i < len; i += page_size) {
-			page_size = len - i;
-			if (page_size > nor->page_size)
-				page_size = nor->page_size;
-
-			ret = spi_nor_wait_till_ready(nor);
-			if (ret)
-				goto write_err;
-
-			write_enable(nor);
-
-			nor->write(nor, to + i, page_size, retlen, buf + i);
-		}
-	}
-
-	ret = spi_nor_wait_till_ready(nor);
-write_err:
+	nor->write(nor, to, len, retlen, buf);
 	spi_nor_unlock_and_unprep(nor, SPI_NOR_OPS_WRITE);
 	return ret;
 }
--- linux-4.1.8/drivers/mtd/devices/m25p80.c.org	2017-03-09 16:39:20.257546455 +0800
+++ linux-4.1.8/drivers/mtd/devices/m25p80.c	2017-03-10 12:52:23.710670609 +0800
@@ -27,6 +27,9 @@
 #include <linux/spi/flash.h>
 #include <linux/mtd/spi-nor.h>
 
+/* Define max times to check status register before we give up. */
+#define MAX_READY_WAIT_JIFFIES  (40 * HZ)       /* M25P16 specs 40s max chip erase */
+
 #define	MAX_CMD_SIZE		6
 struct m25p {
 	struct spi_device	*spi;
@@ -62,6 +65,47 @@
 	return 1 + nor->addr_width;
 }
 
+static int read_sr_m25p80(struct spi_nor *nor)
+{
+	struct m25p *flash = nor->priv;
+	struct spi_device *spi = flash->spi;
+	ssize_t retval;
+	u8 code = SPINOR_OP_RDSR;
+	u8 val;
+
+	retval = spi_write_then_read(spi, &code, 1, &val, 1);
+	if (retval < 0) {
+		dev_err(&flash->spi->dev, "error %d reading SR\n", (int) retval);
+		return retval;
+	}
+
+	return val;
+}
+
+/*
+ * Service routine to read status register until ready, or timeout occurs.
+ * Returns non-zero if error.
+ */
+static int wait_till_ready(struct spi_nor *nor)
+{
+	unsigned long deadline;
+	int sr;
+
+	deadline = jiffies + MAX_READY_WAIT_JIFFIES;
+
+	do {
+		if ((sr = read_sr_m25p80(nor)) < 0)
+			break;
+		else if (!(sr & SR_WIP))
+			return 0;
+
+		cond_resched();
+
+	} while (!time_after_eq(jiffies, deadline));
+
+	return 1;
+}
+
 static int m25p80_write_reg(struct spi_nor *nor, u8 opcode, u8 *buf, int len,
 			int wr_en)
 {
@@ -75,34 +119,90 @@
 	return spi_write(spi, flash->command, len + 1);
 }
 
+static inline int write_enable(struct spi_nor *nor)
+{
+	struct m25p *flash = nor->priv;
+	struct spi_device *spi = flash->spi;
+	u8 *code __attribute__((aligned(64)));
+	int retval;
+
+	code = flash->command;
+	code[0] = SPINOR_OP_WREN;
+
+	retval = spi_write_then_read(spi, code, 1, NULL, 0);
+
+	return retval;
+}
+
 static void m25p80_write(struct spi_nor *nor, loff_t to, size_t len,
 			size_t *retlen, const u_char *buf)
 {
 	struct m25p *flash = nor->priv;
 	struct spi_device *spi = flash->spi;
-	struct spi_transfer t[2] = {};
+	u32 page_offset, page_size;
+	struct spi_transfer t[2];
 	struct spi_message m;
-	int cmd_sz = m25p_cmdsz(nor);
+	u_char tx_buf[8];
+	int len_to_tx = 0;
+	int len_tx_total = 0;
+	int len_tx_done = 0;
+	int cmd_size = m25p_cmdsz(nor);
+	int max_data_len = 8 - m25p_cmdsz(nor);
 
-	spi_message_init(&m);
+	pr_debug("%s: %s to 0x%08x, len %zd\n", dev_name(&flash->spi->dev),
+			__func__, (u32)to, len);
 
-	if (nor->program_opcode == SPINOR_OP_AAI_WP && nor->sst_write_second)
-		cmd_sz = 1;
+	*retlen = 0;
 
-	flash->command[0] = nor->program_opcode;
-	m25p_addr2cmd(nor, to, flash->command);
+	/* sanity checks */
+	if (!len)
+		return(0);
 
-	t[0].tx_buf = flash->command;
-	t[0].len = cmd_sz;
-	spi_message_add_tail(&t[0], &m);
-
-	t[1].tx_buf = buf;
-	t[1].len = len;
-	spi_message_add_tail(&t[1], &m);
+	if (to + len > flash->mtd.size)
+		return -EINVAL;
 
-	spi_sync(spi, &m);
+	//mutex_lock(&nor->lock);
+
+	while(len_tx_done < len)
+	{
 
-	*retlen += m.actual_length - cmd_sz;
+		spi_message_init(&m);
+		memset(t, 0, (sizeof t));
+
+		if((len - len_tx_done) < max_data_len)
+			len_to_tx = len - len_tx_done;
+		else
+			len_to_tx = max_data_len;
+
+		/* Set up the opcode in the write buffer. */
+		flash->command[0] = SPINOR_OP_PP;
+		m25p_addr2cmd(nor, to + len_tx_done, flash->command);
+		memcpy(&tx_buf[0], flash->command, cmd_size);
+		memcpy(&tx_buf[cmd_size], buf + len_tx_done, len_to_tx);
+
+		t[0].tx_buf = &tx_buf[0];
+		t[0].len = cmd_size + len_to_tx;
+
+		spi_message_add_tail(&t[0], &m);
+
+		/* Wait until finished previous write command. */
+		if (wait_till_ready(nor)) {
+			//mutex_unlock(&nor->lock);
+			return 1;
+		}
+
+		write_enable(nor);
+
+		spi_sync(spi, &m);
+
+		len_tx_done += len_to_tx;//valid data which sent out of 8 bytes
+	}
+
+	*retlen = len_tx_done;
+
+	//mutex_unlock(&nor->lock);
+
+	return 0;
 }
 
 static inline unsigned int m25p80_rx_nbits(struct spi_nor *nor)
@@ -117,55 +217,116 @@
 	}
 }
 
-/*
- * Read an address range from the nor chip.  The address range
- * may be any size provided it is within the physical boundaries.
- */
 static int m25p80_read(struct spi_nor *nor, loff_t from, size_t len,
-			size_t *retlen, u_char *buf)
+                size_t *retlen, u_char *buf)
 {
 	struct m25p *flash = nor->priv;
 	struct spi_device *spi = flash->spi;
 	struct spi_transfer t[2];
 	struct spi_message m;
-	unsigned int dummy = nor->read_dummy;
+	int len_to_tx = 0;
+	int len_tx_total = 0;
+	int len_tx_done = 0;
+	int i;
+	u_char rx_data[8];
+	int cmd_size = m25p_cmdsz(nor);
+	int max_data_len = 8 - m25p_cmdsz(nor);
 
-	/* convert the dummy cycles to the number of bytes */
-	dummy /= 8;
+	pr_debug("%s: %s from 0x%08x,len %zd\n", dev_name(&flash->spi->dev), __func__, (u32)from, len);
 
-	spi_message_init(&m);
-	memset(t, 0, (sizeof t));
+	/* sanity checks */
+	if (!len)
+		return 0;
 
-	flash->command[0] = nor->read_opcode;
-	m25p_addr2cmd(nor, from, flash->command);
+	if (from + len > flash->mtd.size)
+		return -EINVAL;
 
-	t[0].tx_buf = flash->command;
-	t[0].len = m25p_cmdsz(nor) + dummy;
-	spi_message_add_tail(&t[0], &m);
-
-	t[1].rx_buf = buf;
-	t[1].rx_nbits = m25p80_rx_nbits(nor);
-	t[1].len = len;
-	spi_message_add_tail(&t[1], &m);
+	while(len_tx_done < len)
+	{
+		spi_message_init(&m);
+		memset(t, 0, (sizeof t));
+
+		if((len - len_tx_done) < max_data_len)
+			len_to_tx = len - len_tx_done;
+		else
+			len_to_tx = max_data_len;
+		/* NOTE:
+		* OPCODE_FAST_READ (if available) is faster.
+		* Should add 1 byte DUMMY_BYTE.
+		*/
+		t[0].tx_buf = flash->command;
+		t[0].rx_buf = &rx_data[0] ;
+		t[0].len = cmd_size + len_to_tx;
+		spi_message_add_tail(&t[0], &m);
+
+		/* Byte count starts at zero. */
+		*retlen = 0;
+
+		//mutex_lock(&nor->lock);
+
+		/* Wait till previous write/erase is done. */
+		if (wait_till_ready(nor)) {
+			/* REVISIT status return?? */
+			//mutex_unlock(&nor->lock);
+			return 1;
+		}
+
+		/* FIXME switch to OPCODE_FAST_READ.  It's required for higher
+		* clocks; and at this writing, every chip this driver handles
+		* supports that opcode.
+		*/
+
+		/* Set up the write data buffer. */
+		flash->command[0] = SPINOR_OP_READ;
+		m25p_addr2cmd(nor, from + len_tx_done, flash->command);
 
-	spi_sync(spi, &m);
+		spi_sync(spi, &m);
+
+		memcpy(buf + len_tx_done, &rx_data[cmd_size], len_to_tx);
+
+		len_tx_done += len_to_tx;//valid data which will be read out of 8 bytes
+
+		//mutex_unlock(&nor->lock);
+	}
+
+	*retlen = len_tx_done;
 
-	*retlen = m.actual_length - m25p_cmdsz(nor) - dummy;
 	return 0;
 }
 
 static int m25p80_erase(struct spi_nor *nor, loff_t offset)
 {
 	struct m25p *flash = nor->priv;
+	struct spi_device *spi = flash->spi;
+	u8 *code __attribute__((aligned(64)));
+	struct spi_transfer     t ;
+	struct spi_message      m;
+
+	spi_message_init(&m);
+	m.is_dma_mapped = 1;
+	memset(&t, 0, (sizeof t));
 
-	dev_dbg(nor->dev, "%dKiB at 0x%08x\n",
-		flash->mtd.erasesize / 1024, (u32)offset);
+	pr_debug("%s: %s %dKiB at 0x%08x cmdsz %d\n", dev_name(&flash->spi->dev),
+			__func__, flash->mtd.erasesize / 1024, (u32)offset, m25p_cmdsz(nor));
+
+	/* Wait until finished previous write command. */
+	if (wait_till_ready(nor))
+		return 1;
+
+	/* Send write enable, then erase commands. */
+	write_enable(nor);
 
 	/* Set up command buffer. */
-	flash->command[0] = nor->erase_opcode;
-	m25p_addr2cmd(nor, offset, flash->command);
+	code = flash->command;
+	code[0] = nor->erase_opcode;
+	m25p_addr2cmd(nor, offset, code);
+
+	t.tx_buf = code;
+	t.tx_dma = virt_to_aram(t.tx_buf);
+	t.len =  m25p_cmdsz(nor);
 
-	spi_write(flash->spi, flash->command, m25p_cmdsz(nor));
+	spi_message_add_tail(&t, &m);
+	spi_sync(spi, &m);
 
 	return 0;
 }
