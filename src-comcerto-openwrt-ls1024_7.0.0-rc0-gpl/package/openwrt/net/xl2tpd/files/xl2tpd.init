#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2010 OpenWrt.org

START=60
STOP=40
BIN=xl2tpd
DEFAULT=/etc/default/$BIN
RUN_D=/var/run
PID_F=$RUN_D/$BIN.pid
IPTABLES="iptables -w"

CONFIGFILE=/tmp/etc/xl2tpd/xl2tpd.conf
OPTIONSFILE=/tmp/etc/ppp/options.xl2tpd

. /lib/functions.sh

ru_check=`uci get systeminfo.sysinfo.region 2> /dev/null`

ENABLE=0  # check if xl2tpd can be enabled.
xappend() {
	local value="$1"
	echo "${value#--}" >> $CONFIGFILE    #${name#pattern} Remove(shortest)front-anchored pattern
}

xappend_options() {
	local value="$1"
	echo "${value#--}" >> $OPTIONSFILE    #${name#pattern} Remove(shortest)front-anchored pattern
}

append_bool() {
	local section="$1"
	local option="$2"
	local value="$3"
	local _loctmp
	config_get_bool _loctmp "$section" "$option" 0
	[ $_loctmp -gt 0 ] && xappend "$value"
}

append_parm() {
	local section="$1"
	local option="$2"
	local switch="$3"
	local _loctmp
	config_get _loctmp "$section" "$option"
	[ -z "$_loctmp" ] && return 0
	xappend "$switch=$_loctmp"
}


start() {

	if [ "$ru_check" = "RU" ]; then
		exit 0
	fi

	echo "; auto-generated config file from /etc/config/l2tpd" > $CONFIGFILE
	echo "# auto-generated config file from /etc/config/l2tpd" > $OPTIONSFILE

	#Install required rules to allow clients to connect us.

	config_load l2tpd
	config_foreach get_status_l2tpd l2tpd 
	if [ "$ENABLE" -eq 0 ]
	then
		$IPTABLES --table filter --append vpn_input_bypass --protocol udp --dport 1701 --match conntrack --ctstate NEW --jump REJECT &> /dev/null
		$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --jump ACCEPT &> /dev/null

		$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --match policy --dir in --pol ipsec --jump ACCEPT &> /dev/null
		$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --match conntrack --ctstate NEW --jump REJECT &> /dev/null
	else
		$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --match conntrack --ctstate NEW --jump REJECT &> /dev/null #Delete and adding the rule for safety.
		$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --jump ACCEPT &> /dev/null #Delete and adding the rule for safety.

		local isL2TPoverIPSecEnable
		config_get isL2TPoverIPSecEnable global ipsec_enable
		if [ "$isL2TPoverIPSecEnable" -eq 0 ]
		then
			$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --match policy --dir in --pol ipsec --jump ACCEPT &> /dev/null
			$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --match conntrack --ctstate NEW --jump REJECT &> /dev/null 

			$IPTABLES --table filter --append vpn_input_bypass --protocol udp --dport 1701 --jump ACCEPT &> /dev/null
		else
			$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --jump ACCEPT &> /dev/null

			$IPTABLES --table filter --append vpn_input_bypass --protocol udp --dport 1701 --match policy --dir in --pol ipsec --jump ACCEPT &> /dev/null
			$IPTABLES --table filter --append vpn_input_bypass --protocol udp --dport 1701 --match conntrack --ctstate NEW --jump REJECT &> /dev/null 
		fi
		config_foreach config_l2tpd l2tpd
	fi

	mkdir -p $RUN_D/$BIN
	[ -f $DEFAULT ] && . $DEFAULT
	$BIN $OPTIONS
}

boot() {
	echo "Creating required links for l2tpd"
	mkdir -p /tmp/etc/xl2tpd/
	touch $CONFIGFILE

	mkdir -p /tmp/etc/ppp/
	touch $OPTIONSFILE

	start
}


stop() {
	if [ "$ru_check" = "RU" ]; then
		exit 0
	fi

	#remove appropriate rules
	$IPTABLES --table filter --delete vpn_input_bypass --protocol udp --dport 1701 --jump ACCEPT &> /dev/null

	conntrack -D -p udp --dport 1701 >/dev/null 2>/dev/null

	[ -f $PID_F ] && kill $(cat $PID_F)
}

config_global(){
	xappend "[global]"
	xappend "; port = 1701"
	xappend "; auth file = /etc/xl2tpd/xl2tp-secrets"
	xappend "; access control = no"
#	xappend "; ipsec saref = yes"
#	xappend "; forceuserspace = yes"
#	xappend "; debug tunnel = yes"
	xappend ""
}

config_lns_default(){
	xappend "[lns default]"
	xappend "require chap = yes"
	xappend "require pap = yes"
	xappend "require authentication = yes"
	xappend "name = l2tpsrvgw"
	xappend "ppp debug = yes"
	xappend "pppoptfile = /etc/ppp/options.xl2tpd"
	xappend "length bit = yes"
	xappend ""
}

config_options(){
	xappend_options "lock"
	xappend_options "login"
	xappend_options "ipcp-accept-local"
	xappend_options "ipcp-accept-remote"
	xappend_options "noccp"
	xappend_options "auth"
	xappend_options "crtscts"
	xappend_options "idle 86400"
	xappend_options "nodefaultroute"
	xappend_options "proxyarp"
	xappend_options "connect-delay 5000"
	xappend_options "plugin radius.so"
	xappend_options "plugin radattr.so"
	xappend_options "plugin authorize.so"
	xappend_options "lcp-echo-failure 5"
	xappend_options "lcp-echo-interval 60"

	xappend_options "require-pap"
	xappend_options "require-chap"
	xappend_options "require-mschap"
	xappend_options "require-mschap-v2"
}

config_l2tpd(){
	local cfg="$1"
	config_global
	local listen_ip
	#config_get listen_ip "$cfg" listen_ip 
	#xappend "listen-addr = $listen_ip"
	xappend_options "debug"
	xappend_options "logfile /tmp/xl2tpd.log"
	config_lns_default
	local ip_start
	local ip_end
	local end_octet add first_three_octets ip_increment
	config_get ip_start "$cfg" ip_start
	config_get ip_end "$cfg" ip_end
	end_octet=`echo $ip_start|cut -d '.' -f 4`
	add=`expr $end_octet + 1`
	first_three_octets=`echo $ip_start|cut -d '.' -f 1-3`
	ip_increment=`echo $first_three_octets.$add`
	xappend "ip range = $ip_increment-$ip_end"
	xappend "local ip = $ip_start"
	
	config_options
	local dns1
	local dns2
	config_get dns1 "$cfg" dns1
	config_get dns2 "$cfg" dns2
	[ -n "$dns1" ] && {
		xappend_options "ms-dns $dns1"
	}
	[ -n "$dns2" ] && {
		xappend_options "ms-dns $dns2"
	}
	local mtu
	config_get mtu "$cfg" mtu
	xappend_options "mtu $mtu" 
	xappend_options "mru $mtu"
	xappend_options ""
}

get_status_l2tpd() {
	local cfg="$1"
	local enable
	config_get_bool enable "$cfg" enable 0	

	ENABLE=$enable
}

reload() {
	restart
}

restart() {
	stop
	start
}
