#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2014 OpenWrt.org

START=95
STOP=15

SERVICE_USE_PID=1
IPTABLES="/usr/sbin/iptables -w"
IP6TABLES="/usr/sbin/ip6tables -w"

upnpd_get_port_range() {
    local _var="$1"; shift
    local _val

    config_get _val "$@"

    case "$_val" in
        [0-9]*[:-][0-9]*)
            export -n -- "${_var}_start=${_val%%[:-]*}"
            export -n -- "${_var}_end=${_val##*[:-]}"
        ;;
        [0-9]*)
            export -n -- "${_var}_start=$_val"
            export -n -- "${_var}_end="
        ;;
    esac
}

conf_rule_add() {
    local cfg="$1"
    local tmpconf="$2"
    local action external_port_start external_port_end int_addr
    local internal_port_start internal_port_end

    config_get action "$cfg" action "deny"               # allow or deny
    upnpd_get_port_range "ext" "$cfg" ext_ports "0-65535" # external ports: x, x-y, x:y
    config_get int_addr "$cfg" int_addr "0.0.0.0/0"       # ip or network and subnet mask (internal)
    upnpd_get_port_range "int" "$cfg" int_ports "0-65535" # internal ports: x, x-y, x:y or range

    # Make a single IP IP/32 so that miniupnpd.conf can use it.
    case "$int_addr" in
        */*) ;;
        *) int_addr="$int_addr/32" ;;
    esac

    echo "${action} ${ext_start}${ext_end:+-}${ext_end} ${int_addr} ${int_start}${int_end:+-}${int_end}" >>$tmpconf
}

upnpd_write_bool() {
    local opt="$1"
    local def="${2:-0}"
    local alt="$3"
    local val

    config_get_bool val config "$opt" "$def"
    if [ "$val" -eq 0 ]; then
        echo "${alt:-$opt}=no" >> $tmpconf
    else
        echo "${alt:-$opt}=yes" >> $tmpconf
    fi
}

boot() {
    return
}
configure_firewallrules()
{
    network_active_wan_interfaces wanifaces
    for iface in $wanifaces
    do
        network_get_waniface realDev $iface
        $IPTABLES -t nat -A  miniupnpd_dnat -i $realDev -j MINIUPNPD
        $IPTABLES -t filter -A miniupnpd_rules -i $realDev -j MINIUPNPD
    done


}
start() {
    config_load "upnpd"
    local extiface intiface upload download logging secure enabled natpmp
    local extip port usesysuptime conffile serial_number model_number
    local uuid notify_interval presentation_url enable_upnp
    local upnp_lease_file clean_ruleset_threshold clean_ruleset_interval
        local ipv6_listening_ip
    
    config_get upnp_enable config enabled                 
    if [ "$upnp_enable" -eq "0" ]
    then
        $IPTABLES -t nat -F MINIUPNPD 2>/dev/null
        $IPTABLES -t filter -F MINIUPNPD 2>/dev/null
        logger -t miniupnpd -p local0.info "upnp disabled by the user"        
        return
    fi
    logger -t miniupnpd -p local0.info "upnp enabled by the user"        
    config_get intiface config internal_iface vlan1
    config_get port config port 0
    config_get upload   config upload
    config_get download config download
    config_get_bool logging config log_output 0
    config_get conffile config config_file
    config_get serial_number config serial_number
    config_get model_number config model_number
    config_get uuid config uuid
    config_get notify_interval config notify_interval
    config_get presentation_url config presentation_url
    config_get upnp_lease_file config upnp_lease_file
    config_get clean_ruleset_threshold config clean_ruleset_threshold
    config_get clean_ruleset_interval config clean_ruleset_interval
    config_get ipv6_listening_ip config ipv6_listening_ip

    local args

    . /lib/functions/network.sh

    local ifname

        # manual external interface overrides everything
        #if [ -z "$extiface" ] ; then
            # manual external zone (if dynamically find interfaces
            # belonging to it) overrides network_find_wan*
         #   if [ -n "$extzone" ] ; then
          #      ifname=$(fw3 -q zone $extzone | head -1)
          #  fi
          #  [ -n "$extiface" ] || network_find_wan extiface
          #  [ -n "$extiface" ] || network_find_wan6 extiface
        #fi
    #[ -n "$ifname" ] || network_get_device ifname ${extiface}

    if [ -n "$conffile" ]; then
        args="-f $conffile"
    else
        local tmpconf="/var/etc/miniupnpd.conf"
        args="-f $tmpconf"
        mkdir -p /var/etc
        
        #network_all_wan_interfaces allWANiface
        network_active_wan_interfaces allWANiface
        for iface in $allWANiface
        do
            ipv6_status=`echo $iface |cut -d _ -f1 |grep 6`
            if [ "$ipv6_status" != " " ]
            then
            	network_get_mwaniface realDev $iface
                echo "ext_ifname=$realDev" >>$tmpconf
            fi
        done
        [ -n "$extip" ] && \
            echo "ext_ip=$extip" >>$tmpconf

        local iface
	network_active_lan_interfaces intiface 
	for iface in $intiface
    	do
		if [ "$iface" != "vlan4094" ] && [ "$iface" != "vlan1" ]
    		then
            		local device
            		network_get_device device "$iface" && {
                	echo "listening_ip=$device" >>$tmpconf
            		}
            	fi
        done
        ## add default listening_ip at last
	network_get_device device "vlan1" && {
		echo "listening_ip=$device" >>$tmpconf
	}

        [ "$port" != "auto" ] && \
            echo "port=$port" >>$tmpconf

        config_load "upnpd"
        upnpd_write_bool enable_natpmp 1
        upnpd_write_bool enable_upnp 1
        #upnpd_write_bool secure_mode 1
        #upnpd_write_bool pcp_allow_thirdparty 0
        upnpd_write_bool system_uptime 1

        [ -n "$upnp_lease_file" ] && \
            echo "lease_file=$upnp_lease_file" >>$tmpconf

        [ -n "$upload" -a -n "$download" ] && {
            echo "bitrate_down=$(($download * 1024 * 8))" >>$tmpconf
            echo "bitrate_up=$(($upload * 1024 * 8))" >>$tmpconf
        }

        [ -n "${presentation_url}" ] && \
            echo "presentation_url=${presentation_url}" >>$tmpconf

        [ -n "${notify_interval}" ] && \
            echo "notify_interval=${notify_interval}" >>$tmpconf

        [ -n "${clean_ruleset_threshold}" ] && \
            echo "clean_ruleset_threshold=${clean_ruleset_threshold}" >>$tmpconf

        [ -n "${clean_ruleset_interval}" ] && \
            echo "clean_ruleset_interval=${clean_ruleset_interval}" >>$tmpconf

        [ -n "${ipv6_listening_ip}" ] && \
            echo "ipv6_listening_ip=${ipv6_listening_ip}" >>$tmpconf

        [ -z "$uuid" ] && {
            uuid="$(cat /proc/sys/kernel/random/uuid)"
            uci set upnpd.config.uuid=$uuid
            uci commit upnpd
        }

        [ "$uuid" = "nocli" ] || \
            echo "uuid=$uuid" >>$tmpconf

        #[ -n "${serial_number}" ] && \
        #    echo "serial=${serial_number}" >>$tmpconf

        serial_number=`uci get systeminfo.sysinfo.serial_number`
        echo "serial=${serial_number}" >>$tmpconf

        [ -n "${model_number}" ] && \
            echo "model_number=${model_number}" >>$tmpconf

	    router_name=`uci get systeminfo.sysinfo.pid`
        router_desc=`uci get systeminfo.sysinfo.prod_desc `
	    echo "friendly_name=`echo $router_name |cut -d"-" -f1`" >> $tmpconf
	    echo "manufacturer_name=Cisco" >> $tmpconf
	    echo "model_name=`echo $router_desc`" >> $tmpconf
	    echo "model_description=$router_name" >> $tmpconf
	    echo "model_number=`echo $router_name |cut -d"-" -f1`" >> $tmpconf
        config_foreach conf_rule_add perm_rule "$tmpconf"
    fi

    ## The below max_rule is the Maximum allowed portforwarding rules by the UPnP. 
    echo "max_rule=100" >>$tmpconf

	configure_firewallrules
    if [ -n "$allWANiface" ]; then
        # start firewall
        $IPTABLES -L MINIUPNPD >/dev/null 2>/dev/null || /etc/init.d/firewall reload

        if [ "$logging" = "1" ]; then
            SERVICE_DAEMONIZE=1 \
            service_start /usr/sbin/miniupnpd $args -d
        else
            SERVICE_DAEMONIZE= \
            service_start /usr/sbin/miniupnpd $args
        fi

	netstat -tunpl | sed '1,2d' | while read proto rec send local remote program
	do
	listen_port=${local##*:}
	local_ip_addr=${local%:*}
	program_name=${program##*/}
	#echo"port no is $listen_port and program is $program_name"
	case $local_ip_addr in
	*:*)
	if [ $program_name == 'miniupnpd' ]; then
	echo "v6 port no is $listen_port and program is $program_name proto is $proto"
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface eth0+ --jump DROP
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface eth2+ --jump DROP
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface ppp+ --jump DROP
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface l2tp+ --jump DROP
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface ppoe+ --jump DROP
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface pptp+ --jump DROP
	$IP6TABLES --table filter --append upnp6_internal --protocol $proto --dport $listen_port --in-interface 3g-usb --jump DROP
	fi
	;;
	*)
	if [ $program_name == 'miniupnpd' -a $local_ip_addr == '0.0.0.0' ]; then
	echo "v4 port no is $listen_port and program is $program_name"
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface eth0+ --jump DROP
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface eth2+ --jump DROP
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface ppp+ --jump DROP
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface l2tp+ --jump DROP
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface ppoe+ --jump DROP
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface pptp+ --jump DROP
	$IPTABLES --table filter --append upnp_internal --protocol $proto --dport $listen_port --in-interface 3g-usb+ --jump DROP
	fi
	;;
	esac
	done
    else
        logger -t "upnp daemon" "external interface not found, not starting"
    fi
}

stop() {
    service_stop /usr/sbin/miniupnpd

    #$IPTABLES -t nat -F MINIUPNPD 2>/dev/null
    #$IPTABLES -t filter -F MINIUPNPD 2>/dev/null
    $IPTABLES --table nat --flush miniupnpd_dnat
    $IPTABLES --table filter --flush miniupnpd_rules
    $IPTABLES -t filter -F upnp_internal 2>/dev/null

        [ -x /usr/sbin/ip6tables ] && {
        $IP6TABLES -t filter -F MINIUPNPD 2>/dev/null
        $IP6TABLES -t filter -F upnp6_internal 2>/dev/null
        }
        
       `rm -fr /var/etc/miniupnpd.conf`
}
