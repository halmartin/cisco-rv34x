From 5aaa059b26fe587c8535e61d711dace8db714361 Mon Sep 17 00:00:00 2001
From: Sridhar Pothuganti <sridhar.pothuganti@freescale.com>
Date: Thu, 26 May 2016 21:17:39 +0530
Subject: [PATCH] 450-IKE Connection look up for PSK based authentication

Signed-off-by: Sridhar Pothuganti <sridhar.pothuganti@freescale.com>
Signed-off-by: Sridhar Pothuganti <sridhar.pothuganti@nxp.com>
---
 src/libcharon/config/backend_manager.c   | 88 ++++++++++++++++++++++++++++++++
 src/libcharon/config/backend_manager.h   | 13 +++++
 src/libcharon/config/proposal.c          |  4 +-
 src/libcharon/sa/ikev1/phase1.c          | 17 ++++++
 src/libcharon/sa/ikev1/task_manager_v1.c | 17 +++++-
 5 files changed, 135 insertions(+), 4 deletions(-)

diff --git a/src/libcharon/config/backend_manager.c b/src/libcharon/config/backend_manager.c
index 79f1d9f..06d2e10 100644
--- a/src/libcharon/config/backend_manager.c
+++ b/src/libcharon/config/backend_manager.c
@@ -183,6 +183,93 @@ METHOD(backend_manager_t, get_ike_cfg, ike_cfg_t*,
 	return found;
 }
 
+METHOD(backend_manager_t, get_ike_cfg_include_proposal, ike_cfg_t*,
+	private_backend_manager_t *this, host_t *me, host_t *other,
+	ike_version_t version, linked_list_t *proposal_list)
+{
+	ike_cfg_t *current, *found = NULL;
+	char *my_addr, *other_addr;
+	enumerator_t *enumerator;
+	ike_cfg_match_t match, best = MATCH_ANY;
+	ike_data_t *data;
+	enumerator_t *stored_enum, *supplied_enum;
+	proposal_t *stored, *supplied, *selected;
+	linked_list_t *stored_proposals;
+
+	INIT(data,
+		.this = this,
+		.me = me,
+		.other = other,
+	);
+
+	DBG2(DBG_CFG, "looking for an ike config for %H...%H", me, other);
+	DBG3(DBG_CFG, "received proposals: %#P", proposal_list);
+
+	this->lock->read_lock(this->lock);
+	enumerator = enumerator_create_nested(
+						this->backends->create_enumerator(this->backends),
+						(void*)ike_enum_create, data, (void*)free);
+	while (enumerator->enumerate(enumerator, (void**)&current))
+	{
+		match = get_ike_match(current, me, other, version);
+		DBG3(DBG_CFG, "ike config match: %d (%H %H %N)",
+			 match, me, other, ike_version_names, version);
+		if (match)
+		{
+			my_addr = current->get_my_addr(current);
+			other_addr = current->get_other_addr(current);
+			DBG2(DBG_CFG, "  candidate: %s...%s, prio %d",
+				 my_addr, other_addr, match);
+			if (match > best)
+			{
+				//Changes. Before updating the ike found, make sure policies were also matched.
+				stored_proposals = current->get_proposals(current);
+				DBG3(DBG_CFG, "stored candidate proposals: %#P", stored_proposals);
+				stored_enum = stored_proposals->create_enumerator(stored_proposals);
+				supplied_enum = proposal_list->create_enumerator(proposal_list);
+				while (stored_enum->enumerate(stored_enum, (void**)&stored))
+				{
+					proposal_list->reset_enumerator(proposal_list, supplied_enum);
+					while (supplied_enum->enumerate(supplied_enum, (void**)&supplied))
+					{
+						selected = stored->select(stored, supplied, 0);
+						if (selected)
+						{
+							//stored_enum->destroy(stored_enum);
+							//supplied_enum->destroy(supplied_enum);
+							DBG3(DBG_CFG, "received proposals: %#P", proposal_list);
+							DBG3(DBG_CFG, "configured proposals: %#P", stored_proposals);
+							DBG3(DBG_CFG, "selected proposal: %P", selected);
+							//return selected;   TODO: As soon as we get the one with the selected proposals, update matches.
+							DESTROY_IF(found);
+							DESTROY_IF(selected);
+							found = current;
+							found->get_ref(found);
+							best = match;
+							DBG3(DBG_CFG, "Updated all required variables.");
+						}
+					}
+				}
+				stored_proposals->destroy_offset(stored_proposals, offsetof(proposal_t, destroy));
+				stored_enum->destroy(stored_enum);
+				supplied_enum->destroy(supplied_enum);
+			}
+		}
+	}
+	DBG3(DBG_CFG, "After all loopings and candidate findings.");
+	enumerator->destroy(enumerator);
+	this->lock->unlock(this->lock);
+	if (found)
+	{
+		my_addr = found->get_my_addr(found);
+		other_addr = found->get_other_addr(found);
+		DBG2(DBG_CFG, "found matching ike config: %s...%s with prio %d",
+			 my_addr, other_addr, best);
+	}
+	return found;
+}
+
+
 /**
  * Get the best ID match in one of the configs auth_cfg
  */
@@ -436,6 +523,7 @@ backend_manager_t *backend_manager_create()
 	INIT(this,
 		.public = {
 			.get_ike_cfg = _get_ike_cfg,
+			.get_ike_cfg_include_proposal = _get_ike_cfg_include_proposal,
 			.get_peer_cfg_by_name = _get_peer_cfg_by_name,
 			.create_peer_cfg_enumerator = _create_peer_cfg_enumerator,
 			.add_backend = _add_backend,
diff --git a/src/libcharon/config/backend_manager.h b/src/libcharon/config/backend_manager.h
index cc8ef87..0f9dfae 100644
--- a/src/libcharon/config/backend_manager.h
+++ b/src/libcharon/config/backend_manager.h
@@ -64,6 +64,19 @@ struct backend_manager_t {
 							  ike_version_t version);
 
 	/**
+	 * Get an ike_config identified by two hosts and the proposals of it.
+	 *
+	 * @param my_host			address of own host
+	 * @param other_host		address of remote host
+	 * @param version			IKE version to get a config for
+	 * @param proposal			proposals of received packet
+	 * @return					matching ike_config, or NULL if none found
+	 */
+	ike_cfg_t* (*get_ike_cfg_include_proposal)(backend_manager_t *this,
+							  host_t *my_host, host_t *other_host,
+							  ike_version_t version, linked_list_t *proposal_list);
+
+	/**
 	 * Get a peer_config identified by it's name.
 	 *
 	 * @param name				name of the peer_config
diff --git a/src/libcharon/config/proposal.c b/src/libcharon/config/proposal.c
index 011c0b8..24e31b9 100644
--- a/src/libcharon/config/proposal.c
+++ b/src/libcharon/config/proposal.c
@@ -267,7 +267,7 @@ static bool select_algo(private_proposal_t *this, proposal_t *other,
 
 	if (!found)
 	{
-		DBG2(DBG_CFG, "  no acceptable %N found", transform_type_names, type);
+		DBG3(DBG_CFG, "  no acceptable %N found", transform_type_names, type);
 	}
 	return found;
 }
@@ -277,7 +277,7 @@ METHOD(proposal_t, select_proposal, proposal_t*,
 {
 	proposal_t *selected;
 
-	DBG2(DBG_CFG, "selecting proposal:");
+	DBG3(DBG_CFG, "selecting proposal:");
 
 	if (this->protocol != other->get_protocol(other))
 	{
diff --git a/src/libcharon/sa/ikev1/phase1.c b/src/libcharon/sa/ikev1/phase1.c
index 1fe834b..1755580 100644
--- a/src/libcharon/sa/ikev1/phase1.c
+++ b/src/libcharon/sa/ikev1/phase1.c
@@ -180,6 +180,10 @@ static shared_key_t *lookup_shared_key(private_phase1_t *this,
 		return shared_key;
 	}
 	/* as responder, we try to find a config by IP */
+	ike_cfg_t *real_ike_cfg , *temp_ike_cfg;
+
+	real_ike_cfg = this->ike_sa->get_ike_cfg(this->ike_sa);
+
 	enumerator = charon->backends->create_peer_cfg_enumerator(charon->backends,
 												me, other, NULL, NULL, IKEV1);
 	while (enumerator->enumerate(enumerator, &peer_cfg))
@@ -192,6 +196,17 @@ static shared_key_t *lookup_shared_key(private_phase1_t *this,
 			other_id = other_auth->get(other_auth, AUTH_RULE_IDENTITY);
 			if (my_id)
 			{
+				temp_ike_cfg=peer_cfg->get_ike_cfg(peer_cfg);
+				DBG3(DBG_IKE,"printing the pointers: selected IKE config:%p current IKE config:%p",real_ike_cfg,temp_ike_cfg);
+
+				if (real_ike_cfg != temp_ike_cfg)
+				{
+					DBG3(DBG_IKE,"Pointers are not equal, hence continue.");
+					continue;
+				}
+
+				DBG1(DBG_IKE, "FSLDBG: Now searching for PSK with :my_id,me,other_id,other: '%Y'[%H] - '%Y'[%H]",
+						my_id, me, other_id, other);
 				shared_key = lib->credmgr->get_shared(lib->credmgr, SHARED_IKE,
 													  my_id, other_id);
 				if (shared_key)
@@ -210,7 +225,9 @@ static shared_key_t *lookup_shared_key(private_phase1_t *this,
 	if (!shared_key)
 	{
 		DBG1(DBG_IKE, "no shared key found for %H - %H", me, other);
+		return shared_key;
 	}
+	DBG3(DBG_IKE, "Got the shared secret key '%s', when acting as responder",(shared_key->get_key(shared_key)).ptr);
 	return shared_key;
 }
 
diff --git a/src/libcharon/sa/ikev1/task_manager_v1.c b/src/libcharon/sa/ikev1/task_manager_v1.c
index 3b0c1cf..a5d5ebe 100644
--- a/src/libcharon/sa/ikev1/task_manager_v1.c
+++ b/src/libcharon/sa/ikev1/task_manager_v1.c
@@ -33,6 +33,8 @@
 #include <sa/ikev1/tasks/isakmp_delete.h>
 #include <sa/ikev1/tasks/isakmp_dpd.h>
 
+#include <encoding/payloads/sa_payload.h>
+
 #include <processing/jobs/retransmit_job.h>
 #include <processing/jobs/delete_ike_sa_job.h>
 #include <processing/jobs/dpd_timeout_job.h>
@@ -1466,9 +1468,20 @@ METHOD(task_manager_t, process_message, status_t,
 			ike_sa_id_t *ike_sa_id;
 			ike_cfg_t *ike_cfg;
 			job_t *job;
+			sa_payload_t *sa_payload;
+			linked_list_t *proposal_list;
+
+			sa_payload = (sa_payload_t*) msg->get_payload(msg, PLV1_SECURITY_ASSOCIATION);
+			if (!sa_payload)
+			{
+				DBG1(DBG_IKE, "Could not get the SA payload.");
+				return DESTROY_ME;
+			}
+			proposal_list = sa_payload->get_proposals(sa_payload);
+			ike_cfg = charon->backends->get_ike_cfg_include_proposal(charon->backends,
+													me, other, IKEV1, proposal_list);
+			proposal_list->destroy_offset(proposal_list, offsetof(proposal_t, destroy));
 
-			ike_cfg = charon->backends->get_ike_cfg(charon->backends,
-													me, other, IKEV1);
 			if (ike_cfg == NULL)
 			{
 				/* no config found for these hosts, destroy */
-- 
1.9.1

