diff -aurN openssl-1.0.2o-orig2/crypto/engine/eng_cryptodev.c openssl-1.0.2o/crypto/engine/eng_cryptodev.c
--- openssl-1.0.2o-orig2/crypto/engine/eng_cryptodev.c	2018-08-16 16:40:41.205529108 +0530
+++ openssl-1.0.2o/crypto/engine/eng_cryptodev.c	2018-08-16 16:52:06.857505689 +0530
@@ -147,6 +147,9 @@
         CRYPTO_ARC4, NID_rc4, 0, 16,
     },
     {
+        CRYPTO_ARC4, NID_rc4_40, 0, 5,
+    },
+    {
         CRYPTO_DES_CBC, NID_des_cbc, 8, 8,
     },
     {
@@ -214,6 +217,9 @@
     {
         CRYPTO_SHA1, NID_sha1, 20
     },
+ /*   { CRYPTO_SHA2_256,		NID_sha256,		32},
+	{ CRYPTO_SHA2_384,		NID_sha384,		48},
+	{ CRYPTO_SHA2_512,		NID_sha512,		64}, */
     {
         0, NID_undef, 0
     },
@@ -242,10 +248,17 @@
 
 static int get_dev_crypto(void)
 {
-    int fd, retfd;
+	static int fd = -1;
+	int retfd;
 
-    if ((fd = open_dev_crypto()) == -1)
-        return (-1);
+	if (fd == -1) {
+		if ((fd = open_dev_crypto()) == -1)
+			return (-1);
+		if (fcntl(fd, F_SETFD, 1) == -1) {
+			close(fd);
+			return (-1);
+		}
+	}
 # ifndef CRIOGET_NOT_NEEDED
     if (ioctl(fd, CRIOGET, &retfd) == -1)
         return (-1);
@@ -440,10 +453,20 @@
     } else
         cryp.iv = NULL;
 
-    if (ioctl(state->d_fd, CIOCCRYPT, &cryp) == -1) {
-        /*
-         * XXX need better errror handling this can fail for a number of
-         * different reasons.
+        if( (sess->cipher == CRYPTO_AES_CBC ) && (inl <= 384) && ctx->cipher->iv_len)
+        {
+               if( cryp.op == COP_ENCRYPT )
+               {
+                 AES_cbc_encrypt(in, out, inl, &sess->aes_enckey, ctx->iv, 1 );
+               }
+               else
+               {
+                AES_cbc_encrypt(in, out, inl, &sess->aes_deckey, ctx->iv, 0 );
+               }
+        }
+        else if (ioctl(state->d_fd, CIOCCRYPT, &cryp) == -1) {
+		/* XXX need better errror handling
+		 * this can fail for a number of different reasons.
          */
         return (0);
     }
@@ -487,6 +510,19 @@
     sess->key = (caddr_t) key;
     sess->keylen = ctx->key_len;
     sess->cipher = cipher;
+        if(sess->cipher == CRYPTO_AES_CBC)
+        {
+            if (AES_set_encrypt_key(sess->key, sess->keylen<<3, &sess->aes_enckey) < 0) {
+                  printf("set encrypt key failed\n");
+                  return 0;
+            }
+       
+
+            if (AES_set_decrypt_key(sess->key, sess->keylen<<3, &sess->aes_deckey) < 0 ) {
+                 printf("set decrypt key failed\n");
+                 return 0;
+            }
+        }
 
     if (ioctl(state->d_fd, CIOCGSESSION, sess) == -1) {
         put_dev_crypto(state->d_fd);
@@ -549,6 +585,20 @@
     NULL
 };
 
+/* RC4 40 */
+const EVP_CIPHER cryptodev_rc4_40 = {
+	NID_rc4_40,
+	1, 5, 0,
+	EVP_CIPH_VARIABLE_LENGTH,
+	cryptodev_init_key,
+	cryptodev_cipher,
+	cryptodev_cleanup,
+	sizeof(struct dev_crypto_state),
+	NULL,
+	NULL,
+	NULL
+};
+
 /* DES CBC EVP */
 const EVP_CIPHER cryptodev_des_cbc = {
     NID_des_cbc,
@@ -698,6 +748,9 @@
     case NID_rc4:
         *cipher = &cryptodev_rc4;
         break;
+    case NID_rc4_40:
+	*cipher = &cryptodev_rc4_40;
+        break;
     case NID_des_ede3_cbc:
         *cipher = &cryptodev_3des_cbc;
         break;
@@ -953,7 +1006,8 @@
 
 const EVP_MD cryptodev_sha1 = {
     NID_sha1,
-    NID_undef,
+//  NID_undef,
+    NID_sha1WithRSAEncryption,
     SHA_DIGEST_LENGTH,
     EVP_MD_FLAG_ONESHOT,
     cryptodev_digest_init,
@@ -961,14 +1015,62 @@
     cryptodev_digest_final,
     cryptodev_digest_copy,
     cryptodev_digest_cleanup,
-    EVP_PKEY_NULL_method,
+    //EVP_PKEY_NULL_method,
+    EVP_PKEY_RSA_method,
     SHA_CBLOCK,
     sizeof(struct dev_crypto_state),
 };
 
+const EVP_MD cryptodev_sha256 = {
+	NID_sha256,
+//	NID_undef,
+	NID_sha256WithRSAEncryption,
+	SHA256_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_RSA_method,
+	SHA256_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
+
+const EVP_MD cryptodev_sha384 = {
+	NID_sha384,
+//	NID_undef,
+	NID_sha384WithRSAEncryption,
+	SHA384_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_RSA_method,
+	SHA512_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
+const EVP_MD cryptodev_sha512 = {
+	NID_sha512,
+//	NID_undef,
+	NID_sha512WithRSAEncryption,
+	SHA512_DIGEST_LENGTH,
+	EVP_MD_FLAG_ONESHOT,
+	cryptodev_digest_init,
+	cryptodev_digest_update,
+	cryptodev_digest_final,
+	cryptodev_digest_copy,
+	cryptodev_digest_cleanup,
+	EVP_PKEY_RSA_method,
+	SHA512_CBLOCK,
+	sizeof(struct dev_crypto_state),
+};
 const EVP_MD cryptodev_md5 = {
     NID_md5,
-    NID_undef,
+//  NID_undef,
+    NID_md5WithRSAEncryption,
     16 /* MD5_DIGEST_LENGTH */ ,
     EVP_MD_FLAG_ONESHOT,
     cryptodev_digest_init,
@@ -976,7 +1078,8 @@
     cryptodev_digest_final,
     cryptodev_digest_copy,
     cryptodev_digest_cleanup,
-    EVP_PKEY_NULL_method,
+    //EVP_PKEY_NULL_method,
+	EVP_PKEY_RSA_method,
     64 /* MD5_CBLOCK */ ,
     sizeof(struct dev_crypto_state),
 };
@@ -998,6 +1101,15 @@
     case NID_sha1:
         *digest = &cryptodev_sha1;
         break;
+	case NID_sha256:
+		*digest = &cryptodev_sha256;
+		break;
+	case NID_sha384:
+		*digest = &cryptodev_sha384;
+		break;
+	case NID_sha512:
+		*digest = &cryptodev_sha512;
+		break;
     default:
 # endif                         /* USE_CRYPTODEV_DIGESTS */
         *digest = NULL;
@@ -1133,32 +1245,41 @@
         return (ret);
     }
 
-    memset(&kop, 0, sizeof(kop));
-    kop.crk_op = CRK_MOD_EXP;
-
-    /* inputs: a^p % m */
-    if (bn2crparam(a, &kop.crk_param[0]))
-        goto err;
-    if (bn2crparam(p, &kop.crk_param[1]))
-        goto err;
-    if (bn2crparam(m, &kop.crk_param[2]))
-        goto err;
-    kop.crk_iparams = 3;
-
-    if (cryptodev_asym(&kop, BN_num_bytes(m), r, 0, NULL)) {
-        const RSA_METHOD *meth = RSA_PKCS1_SSLeay();
-        printf("OCF asym process failed, Running in software\n");
-        ret = meth->bn_mod_exp(r, a, p, m, ctx, in_mont);
-
-    } else if (ECANCELED == kop.crk_status) {
+	if( (BN_num_bits(r) <= 2048) && (BN_num_bits(a) <= 2048) &&
+     		(BN_num_bits(p) <= 2048) && (BN_num_bits(m) <= 2048))
+	{
+            memset(&kop, 0, sizeof kop);
+            kop.crk_op = CRK_MOD_EXP;
+
+            /* inputs: a^p % m */
+            if (bn2crparam(a, &kop.crk_param[0]))
+                    goto err;
+            if (bn2crparam(p, &kop.crk_param[1]))
+                     goto err;
+            if (bn2crparam(m, &kop.crk_param[2]))
+                    goto err;
+            kop.crk_iparams = 3;
+
+            if (cryptodev_asym(&kop, BN_num_bytes(m), r, 0, NULL)) {
+                    const RSA_METHOD *meth = RSA_PKCS1_SSLeay();
+			        fprintf(stderr, "cryptodev_asym: CRK_MOD_EXP %s failed, "
+				            "Running in software\n", errno==kop.crk_status ?
+				            "hardware operation" : "asym process");
+                    ret = meth->bn_mod_exp(r, a, p, m, ctx, in_mont);
+		    }
+            /* else cryptodev operation worked ok ==> ret = 1 */
+	}
+	else
+	{
         const RSA_METHOD *meth = RSA_PKCS1_SSLeay();
-        printf("OCF hardware operation cancelled. Running in Software\n");
         ret = meth->bn_mod_exp(r, a, p, m, ctx, in_mont);
     }
-    /* else cryptodev operation worked ok ==> ret = 1 */
+    
 
  err:
-    zapparams(&kop);
+	if( (BN_num_bits(r) <= 2048) && (BN_num_bits(a) <= 2048) &&
+			(BN_num_bits(p) <= 2048) && (BN_num_bits(m) <= 2048))
+		    zapparams(&kop);
     return (ret);
 }
 
@@ -1168,7 +1289,16 @@
 {
     int r;
     ctx = BN_CTX_new();
-    r = cryptodev_bn_mod_exp(r0, I, rsa->d, rsa->n, ctx, NULL);
+    if( (BN_num_bits(r0) <= 2048) && (BN_num_bits(I) <= 2048) &&
+            (BN_num_bits(rsa->d) <= 2048) && (BN_num_bits(rsa->n) <= 2048))
+    {
+            r = cryptodev_bn_mod_exp(r0, I, rsa->d, rsa->n, ctx, NULL);
+    }
+    else
+    {
+            const RSA_METHOD *meth = RSA_PKCS1_SSLeay();
+	    r = meth->rsa_mod_exp(r0, I, rsa, ctx);
+    }
     BN_CTX_free(ctx);
     return (r);
 }
@@ -1203,12 +1333,9 @@
 
     if (cryptodev_asym(&kop, BN_num_bytes(rsa->n), r0, 0, NULL)) {
         const RSA_METHOD *meth = RSA_PKCS1_SSLeay();
-        printf("OCF asym process failed, running in Software\n");
-        ret = (*meth->rsa_mod_exp) (r0, I, rsa, ctx);
-
-    } else if (ECANCELED == kop.crk_status) {
-        const RSA_METHOD *meth = RSA_PKCS1_SSLeay();
-        printf("OCF hardware operation cancelled. Running in Software\n");
+		fprintf(stderr, "cryptodev_asym: CRK_MOD_EXP_CRT %s failed, "
+			"Running in software\n", errno==kop.crk_status ?
+			"hardware operation" : "asym process");
         ret = (*meth->rsa_mod_exp) (r0, I, rsa, ctx);
     }
     /* else cryptodev operation worked ok ==> ret = 1 */
@@ -1313,6 +1440,9 @@
         r = s = NULL;
     } else {
         const DSA_METHOD *meth = DSA_OpenSSL();
+		fprintf(stderr, "cryptodev_asym: CRK_DSA_SIGN %s failed, "
+			"Running in software\n", errno==kop.crk_status ?
+			"hardware operation" : "asym process");
         dsaret = (meth->dsa_do_sign) (dgst, dlen, dsa);
     }
  err:
@@ -1359,6 +1489,9 @@
     } else {
         const DSA_METHOD *meth = DSA_OpenSSL();
 
+		fprintf(stderr, "cryptodev_asym: CRK_DSA_VERIFY %s failed, "
+			"Running in software\n", errno==kop.crk_status ?
+			"hardware operation" : "asym process");
         dsaret = (meth->dsa_do_verify) (dgst, dlen, sig, dsa);
     }
  err:
@@ -1392,8 +1525,8 @@
 cryptodev_dh_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     struct crypt_kop kop;
-    int dhret = 1;
-    int fd, keylen;
+    int dhret = -1;
+    int fd, keybits;
 
     if ((fd = get_asym_dev_crypto()) < 0) {
         const DH_METHOD *meth = DH_OpenSSL();
@@ -1401,9 +1534,9 @@
         return ((meth->compute_key) (key, pub_key, dh));
     }
 
-    keylen = BN_num_bits(dh->p);
+    keybits = BN_num_bits(dh->p);
 
-    memset(&kop, 0, sizeof(kop));
+    memset(&kop, 0, sizeof kop);
     kop.crk_op = CRK_DH_COMPUTE_KEY;
 
     /* inputs: dh->priv_key pub_key dh->p key */
@@ -1416,14 +1549,18 @@
     kop.crk_iparams = 3;
 
     kop.crk_param[3].crp_p = (caddr_t) key;
-    kop.crk_param[3].crp_nbits = keylen * 8;
+    kop.crk_param[3].crp_nbits = keybits;
     kop.crk_oparams = 1;
 
     if (ioctl(fd, CIOCKEY, &kop) == -1) {
         const DH_METHOD *meth = DH_OpenSSL();
 
+		fprintf(stderr, "cryptodev_asym: CRK_DH_COMPUTE_KEY %s failed, "
+			"Running in software\n", errno==kop.crk_status ?
+			"hardware operation" : "asym process");
         dhret = (meth->compute_key) (key, pub_key, dh);
-    }
+	} else
+		dhret = (keybits + 7) / 8;
  err:
     kop.crk_param[3].crp_p = NULL;
     zapparams(&kop);
diff -aurN openssl-1.0.2o-orig2/Makefile openssl-1.0.2o/Makefile
--- openssl-1.0.2o-orig2/Makefile	2018-08-16 16:40:43.757529021 +0530
+++ openssl-1.0.2o/Makefile	2018-08-16 17:00:54.769487658 +0530
@@ -439,7 +439,7 @@
 
 links:
 	@$(PERL) $(TOP)/util/mkdir-p.pl include/openssl
-	@$(PERL) $(TOP)/util/mklink.pl include/openssl $(EXHEADER)
+	@$(PERL) $(TOP)/util/mklink.pl include/openssl $(HEADER) $(EXHEADER)
 	@set -e; target=links; $(RECURSIVE_BUILD_CMD)
 
 gentests:
