diff -rupN libnfnetlink-1.0.1/include/libnfnetlink/libnfnetlink.h libnfnetlink-1.0.1-modified/include/libnfnetlink/libnfnetlink.h
--- libnfnetlink-1.0.1/include/libnfnetlink/libnfnetlink.h	2010-05-10 03:01:56.000000000 +0530
+++ libnfnetlink-1.0.1-modified/include/libnfnetlink/libnfnetlink.h	2015-02-19 14:22:46.675400307 +0530
@@ -61,6 +61,9 @@ struct nfnl_callback {
 struct nfnl_handle;
 struct nfnl_subsys_handle;
 
+extern int nfnl_set_nonblocking_mode(struct nfnl_handle *h);
+extern int nfnl_unset_nonblocking_mode(struct nfnl_handle *h);
+
 extern int nfnl_fd(struct nfnl_handle *h);
 extern unsigned int nfnl_portid(const struct nfnl_handle *h);
 
diff -rupN libnfnetlink-1.0.1/src/libnfnetlink.c libnfnetlink-1.0.1-modified/src/libnfnetlink.c
--- libnfnetlink-1.0.1/src/libnfnetlink.c	2012-08-13 23:26:29.503703706 +0530
+++ libnfnetlink-1.0.1-modified/src/libnfnetlink.c	2015-02-19 14:32:35.955418611 +0530
@@ -42,6 +42,7 @@
 #include <errno.h>
 #include <string.h>
 #include <time.h>
+#include <fcntl.h>
 #include <netinet/in.h>
 #include <assert.h>
 #include <linux/types.h>
@@ -81,6 +82,7 @@ struct nfnl_subsys_handle {
 #define		NFNL_MAX_SUBSYS			16 /* enough for now */
 
 #define NFNL_F_SEQTRACK_ENABLED		(1 << 0)
+#define NFNL_F_NONBLOCKING_MODE    (1 << 1)
 
 struct nfnl_handle {
 	int			fd;
@@ -256,6 +258,48 @@ void nfnl_set_rcv_buffer_size(struct nfn
 {
 	h->rcv_buffer_size = size;
 }
+/*
+ * nfnl_set_nonblocking_mode - set non blocking mode for netlink socket
+ * @h: nfnetlink handler
+ */
+int nfnl_set_nonblocking_mode(struct nfnl_handle *h)
+{
+	int ret;
+
+	ret = fcntl(h->fd, F_GETFL);
+	if (ret < 0)
+		return ret;
+
+	ret = fcntl(h->fd, F_SETFL, ret | O_NONBLOCK);
+	if (ret < 0)
+		return ret;
+
+	h->flags |= NFNL_F_NONBLOCKING_MODE;
+
+	return 0;
+}
+
+
+/**
+ * nfnl_unset_nonblocking_mode - unset non blocking mode for netlink socket
+ * @h: nfnetlink handler
+ */
+int nfnl_unset_nonblocking_mode(struct nfnl_handle *h)
+{
+	int ret;
+
+	ret = fcntl(h->fd, F_GETFL);
+	if (ret < 0)
+		return ret;
+
+	ret = fcntl(h->fd, F_SETFL, ret & ~O_NONBLOCK);
+	if (ret < 0)
+		return ret;
+
+	h->flags &= ~NFNL_F_NONBLOCKING_MODE;
+
+  return 0;
+}
 
 /**
  * nfnl_subsys_open - open a netlink subsystem
@@ -1524,7 +1568,7 @@ int nfnl_catch(struct nfnl_handle *h)
 
 	assert(h);
 
-	while (1) {
+	do {
 		unsigned char buf[h->rcv_buffer_size]
 			__attribute__ ((aligned));
 
@@ -1539,7 +1583,8 @@ int nfnl_catch(struct nfnl_handle *h)
 		ret = nfnl_process(h, buf, ret);
 		if (ret <= NFNL_CB_STOP)
 			break; 
-	}
+
+	} while (!(h->flags & NFNL_F_NONBLOCKING_MODE));
 
 	return ret;
 }
