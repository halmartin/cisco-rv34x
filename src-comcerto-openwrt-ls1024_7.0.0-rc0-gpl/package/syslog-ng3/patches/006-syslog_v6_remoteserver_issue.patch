--- syslog-ng-3.0.8_Orig/src/cfg-grammar.y	2016-06-01 02:12:15.563838711 +0530
+++ syslog-ng-3.0.8/src/cfg-grammar.y	2016-06-01 02:14:52.455844245 +0530
@@ -965,7 +965,7 @@ dest_afsyslog
 dest_afsyslog_params
         : string
           {
-            last_driver = afinet_dd_new(last_addr_family, $1, 601, AFSOCKET_STREAM | AFSOCKET_SYSLOG_PROTOCOL);
+            last_driver = afinet_dd_new(last_addr_family, $1, 701, AFSOCKET_STREAM | AFSOCKET_SYSLOG_PROTOCOL);
 	    last_writer_options = &((AFSocketDestDriver *) last_driver)->writer_options;
 	    last_sock_options = &((AFInetDestDriver *) last_driver)->sock_options.super;
 	    free($1);
--- syslog-ng-3.0.8_Orig/src/afinet.c	2016-06-01 02:12:15.563838711 +0530
+++ syslog-ng-3.0.8/src/afinet.c	2016-06-01 02:14:42.255843886 +0530
@@ -539,30 +539,62 @@ afinet_dd_free(LogPipe *s)
 LogDriver *
 afinet_dd_new(gint af, gchar *host, gint port, guint flags)
 {
-  AFInetDestDriver *self = g_new0(AFInetDestDriver, 1);
-  
-  afsocket_dd_init_instance(&self->super, &self->sock_options.super, flags, g_strdup(host), g_strdup_printf("%s:%d", host, port));
-  if (self->super.flags & AFSOCKET_DGRAM)
-    self->super.transport = g_strdup("udp");
-  else if (self->super.flags & AFSOCKET_STREAM)
-    self->super.transport = g_strdup("tcp");
-  self->super.super.super.init = afinet_dd_init;
-  self->super.super.super.queue = afinet_dd_queue;
-  self->super.super.super.free_fn = afinet_dd_free;
-  if (af == AF_INET)
+    AFInetDestDriver *self = g_new0(AFInetDestDriver, 1);
+    int OrigPort=port;
+
+    /* Adding one hack that if port is 701 then check and resovle the dns for syslog that should work for both v4 & v6 */
+    if (OrigPort == 701)
+	port=601;
+
+    afsocket_dd_init_instance(&self->super, &self->sock_options.super, flags, g_strdup(host), g_strdup_printf("%s:%d", host, port));
+    if (self->super.flags & AFSOCKET_DGRAM)
+	self->super.transport = g_strdup("udp");
+    else if (self->super.flags & AFSOCKET_STREAM)
+	self->super.transport = g_strdup("tcp");
+    self->super.super.super.init = afinet_dd_init;
+    self->super.super.super.queue = afinet_dd_queue;
+    self->super.super.super.free_fn = afinet_dd_free;
+
+    if (OrigPort == 701) {
+	struct addrinfo hints;
+	struct addrinfo *res;
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family = AF_UNSPEC;
+	hints.ai_socktype = 0;
+	hints.ai_protocol = 0;
+
+	if (getaddrinfo(host, NULL, &hints, &res) == 0) {
+	    /* we only use the first entry in the returned list */
+	    switch (res->ai_family) {
+		case AF_INET:
+		    af = AF_INET;
+		    break;
+#if ENABLE_IPV6
+		case AF_INET6:
+		    af = AF_INET6;
+		    break;
+#endif
+		default:
+		    af = AF_INET;
+		    break;
+	    }
+	}
+
+    }
+    if (af == AF_INET)
     {
-      self->super.bind_addr = g_sockaddr_inet_new("0.0.0.0", 0);
-      self->super.dest_addr = g_sockaddr_inet_new("0.0.0.0", port);
+	self->super.bind_addr = g_sockaddr_inet_new("0.0.0.0", 0);
+	self->super.dest_addr = g_sockaddr_inet_new("0.0.0.0", port);
     }
-  else
+    else
     {
 #if ENABLE_IPV6
-      self->super.bind_addr = g_sockaddr_inet6_new("::", 0);
-      self->super.dest_addr = g_sockaddr_inet6_new("::", port);
+	self->super.bind_addr = g_sockaddr_inet6_new("::", 0);
+	self->super.dest_addr = g_sockaddr_inet6_new("::", port);
 #else
-      g_assert_not_reached();
+	g_assert_not_reached();
 #endif
     }
-  self->super.setup_socket = afinet_dd_setup_socket;
-  return &self->super.super;
+    self->super.setup_socket = afinet_dd_setup_socket;
+    return &self->super.super;
 }
