#!/bin/sh /etc/rc.common

# Give the last sequence such that, all modules are ready and functioning prior to system_ready_settings
START=99
. /lib/functions.sh
. /lib/functions/network.sh

system_ready_settings() {
	#Once the DUT boot up is done. We need to reload firewall, mini-upnpd, dnsmasq.	
	#For these modules we are skipping any hotplug calls that are seen during DUT boot.
	/etc/init.d/firewall hotplug_reload
	/etc/init.d/dnsmasq reload &
	/etc/init.d/miniupnpd restart &

	# Firewall / Forwarding feature
	board=$__this_device
	iptables -w -D INPUT -j DROP >/dev/null 2>&1
	echo "1"> /proc/sys/net/ipv4/ip_forward
	echo "1"> /proc/sys/net/ipv6/conf/all/forwarding
	echo "1"> /proc/sys/net/ipv6/conf/all/proxy_ndp

	
	# Add any other settings with comment
	# For Connection rate, the below tunables are added
	echo "10" > /proc/sys/net/ipv4/tcp_fin_timeout
	echo "5" > /proc/sys/net/netfilter/nf_conntrack_tcp_timeout_close
	echo "5" > /proc/sys/net/netfilter/nf_conntrack_tcp_timeout_time_wait

	## For Concurrent connections Improvement
	echo 1 > /proc/sys/net/ipv4/tcp_no_metrics_save
	echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
	echo 100000 > /proc/sys/net/ipv4/tcp_max_tw_buckets
	echo 50000  > /proc/sys/net/core/somaxconn
	echo 100000 > /proc/sys/net/ipv4/tcp_max_syn_backlog

	/etc/init.d/abootpattern4 boot
	# Startup log
	ACTIVE_VERSION="`uci get firmware.firminfo.version`" >/dev/null 2>&1

	INACTIVE_VERSION="`uci get firmware.firminfo.inactive_version`" >/dev/null 2>&1
	BOOT_FAIL_FLAG=`cat /proc/cmdline | awk -vRS=" " -vORS="\n" '1' | grep boot_fail_flag`
	MTD_SPI_BOOTCHECK=19
	ERROR_STRING=" UBIFS error "
	ERR=`dmesg | grep -m 1 "UBIFS error" | cut -d ':' -f 1 | cut -d ']' -f 2 | cut -d '(' -f 1 `

	#ECC_ERROR_STRING=" ECC correction failed "
 	#ECC_ERR=`dmesg | grep -m 1 "ECC correction failed" | cut -d ']'  -f 2 | cut -c-23`

	if [ "$ERR" = "$ERROR_STRING" ]; then
		ERR=`dmesg | grep "UBIFS error"`
		logger -t system -p local0.notice "$ERR detected ! rebooting"
		sync
		reboot
	#elif [ "$ECC_ERR" = "$ECC_ERROR_STRING" ]; then
	#	ECC_ERR=`dmesg | grep "ECC correction failed"`	
	#	logger -t system -p local0.notice "$ERR detected ! rebooting"
	#	sync
	#	reboot
	else
		flash_erase -q /dev/mtd$MTD_SPI_BOOTCHECK 0 0
		dd if=/dev/zero of=/dev/mtd$MTD_SPI_BOOTCHECK bs=1 count=1
	fi

	uci_set_state system core "" system_state
	uci_set_state system core booted 1

	ifaces=$(uci show network | grep "proto=static" | cut -d . -f 2 | grep -v loopback | grep -v vlan)
	for i in $ifaces
	do
		network_get_device interface $i
		run=$(ifconfig $interface | grep "RUNNING")
		[ -n "$run" ] || {
			ifconfig $interface 0
		}
	done
	# Check upgrade from USB
	/usr/bin/bootup_Upgrade &

	# For Connection rate, cmm process is afining to a core
	for cmmpid in $(ls /proc/$(pgrep cmm)/task/); do
		taskset -p 1 $cmmpid 2>&- >&-
	done

	#OOM hack to bypass killing cmm, init and login shell.
	echo -17 > /proc/`pgrep cmm`/oom_score_adj
	echo -17 > /proc/1/oom_score_adj
	echo -17 > /proc/`pgrep ash`/oom_score_adj

	if [ "$board" = "RV340W" ] || [ "$board" = "RV160W" ] || [ "$board" = "RV260W" ] ;then
	{
		[ -n "$(which wifi_update_affinity)" ] && {
			wifi_update_affinity
		}

		cppidfile=/var/run/captive.pid
		[ -e ${cppidfile} ] && {
			/etc/init.d/captive_portal restart
		}
	}
	fi

	##
	#echo "##Checking lanwancheck work around" >/dev/console
	logger -t system -p local0.notice "##Checking lanwancheck work around Here"
	# Temporary check for lan/wan1 issue again here
	/etc/init.d/lanwancheck  lan_wan_work_around all

    echo 4 4 1 7 > /proc/sys/kernel/printk

	#Update the UCI file to intimate GUI about the status of image fallback to inactive.
	rm -f /tmp/etc/config/bootfail
	touch /tmp/etc/config/bootfail
	uci set bootfail.status=bootfail
	if [ x$BOOT_FAIL_FLAG = xboot_fail_flag=1 ]; then
		logger -t system -p local0.notice "Image failover occurred, device booted currently with firmware version: $ACTIVE_VERSION. Please check and upload the correct firmware if necessary"
		uci set bootfail.status.log=1
		uci commit bootfail
	else
		uci set bootfail.status.log=0
		uci commit bootfail
	fi

	#Set power LED to Solid Green once everything is done.
	echo 1 > /proc/power_led

	logger -t system -p local0.notice "device booted with active firmware version: $ACTIVE_VERSION"
	echo "Device booted" > /dev/console

	#PPSBR-2089 PPSBR-1004
	[ `ethtool -d eth2 | sed -n 4p | xargs | awk -F ' ' '{print $6}'` != "02" ] && {
		wanport_status=$(uci get wanport.wan1.status)
		wanrunning=$(ifconfig eth2 | grep -w RUNNING)
		[ "$wanport_status" == "1" ] && [ -n "$wanrunning" ] && {
			logger -t system "Workaround for WAN1 port issue is executed."
			/etc/init.d/wanport toggle_wanport wan1
		}
	}

	[ `ethtool -d eth0 | sed -n 4p | xargs | awk -F ' ' '{print $6}'` != "02" ] && {
		wanport_status=$(uci get wanport.wan2.status)
		wanrunning=$(ifconfig eth0 | grep -w RUNNING)
		[ "$wanport_status" == "1" ] && [ -n "$wanrunning" ] && {
			logger -t system "Workaround for WAN2 port issue is executed."
			/etc/init.d/wanport toggle_wanport wan2
		}
	}

	# Adding below sleep to ensure previous log message reached syslog server
	sleep 1
	# reload the syslog to send logs to remote server.
        /etc/init.d/config_update.sh syslog &
}

build_required_opsdb (){
	# Build the opsdb which is required at bootuptime
	sh /usr/bin/certscript boot &
	
	# Spwan a script to execute wanscript every 1 min , 10 times.
	sh /usr/bin/executeWanScript &
}

boot() {
	system_ready_settings
	build_required_opsdb
	pgrep -f check_ubifs_error | xargs kill -9
}
