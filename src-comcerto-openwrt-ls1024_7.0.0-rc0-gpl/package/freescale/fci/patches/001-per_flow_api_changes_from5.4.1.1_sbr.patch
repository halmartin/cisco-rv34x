# 2017-11-03: Ganesh Reddy <ganesh.redd@nxp.com>
# Flow statistics kernel  API support inclusion as per changes in RV34x as patch into PP also.
diff -aurN fci-2.00.3-orig/fci.c fci-2.00.3/fci.c
--- fci-2.00.3-orig/fci.c	2017-10-18 13:11:57.280252882 +0530
+++ fci-2.00.3/fci.c	2017-10-18 13:13:41.720250896 +0530
@@ -32,6 +32,9 @@
 #include <net/net_namespace.h>
 #endif
 #include "fci.h"
+#ifdef PFE_KERNEL_SUPPORT
+#include "fci_pfe.h"
+#endif
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Mindspeed Technologies");
@@ -554,6 +557,25 @@
 	return rc;
 }
 
+#ifdef PFE_KERNEL_SUPPORT
+int fci_kernel_inbound_parser(pfe_ctrl_cmd* ctrl_cmd)
+{
+	FCI_MSG *fci_msg;
+	FCI_MSG *fci_rep;
+	int rc;
+
+	FCI_PRINTK(FCI_INBOUND, "FCI: fci_kernel_inbound_parser()\n");
+
+	fci_msg = (FCI_MSG *)&ctrl_cmd->msg;
+	fci_rep = (FCI_MSG *)&ctrl_cmd->rep;
+
+	rc = fci_fe_inbound_parser(fci_msg, fci_rep);
+
+	return rc;
+}
+EXPORT_SYMBOL(fci_kernel_inbound_parser);
+#endif
+
 /***************************** MISCS FUNCTIONS ********************************/
 
 #if LINUX_VERSION_CODE > KERNEL_VERSION(3,10,0)
diff -aurN fci-2.00.3-orig/fci_pfe.h fci-2.00.3/fci_pfe.h
--- fci-2.00.3-orig/fci_pfe.h	1970-01-01 05:30:00.000000000 +0530
+++ fci-2.00.3/fci_pfe.h	2017-05-02 14:02:10.219234000 +0530
@@ -0,0 +1,21 @@
+#ifndef _FCI_PFE_H
+#define _FCI_PFE_H
+
+#define FCI_MSG_MAX_PAYLOAD	256
+
+typedef struct t_pfe_fci_msg
+{
+	unsigned short fcode;
+	unsigned short length;
+	unsigned short buf[(FCI_MSG_MAX_PAYLOAD)/sizeof(unsigned short)];
+} pfe_fci_msg;
+
+typedef struct t_pfe_ctrl_cmd
+{
+	pfe_fci_msg  msg;
+	pfe_fci_msg  rep;
+} pfe_ctrl_cmd;
+
+int fci_kernel_inbound_parser(pfe_ctrl_cmd* ctrl_cmd);
+
+#endif /* _FCI_PFE_H */
diff -aurN fci-2.00.3-orig/Makefile fci-2.00.3/Makefile
--- fci-2.00.3-orig/Makefile	2017-10-18 13:11:57.332252881 +0530
+++ fci-2.00.3/Makefile	2017-10-18 13:12:39.900252071 +0530
@@ -3,5 +3,9 @@
 
 obj-m:=fci.o
 
+ifeq ($(PFE_KERNEL_SUPPORT), yes)
+EXTRA_CFLAGS += -DPFE_KERNEL_SUPPORT
+endif
+
 all:
 	$(MAKE) -C $(KERNEL_SOURCE) ARCH=$(BOARD_ARCH) SUBDIRS="$(TOP_DIR)" modules
diff -aurN fci-2.00.3-orig/pfe_application.c fci-2.00.3/pfe_application.c
--- fci-2.00.3-orig/pfe_application.c	1970-01-01 05:30:00.000000000 +0530
+++ fci-2.00.3/pfe_application.c	2017-05-02 14:02:10.235234000 +0530
@@ -0,0 +1,136 @@
+/*
+ *
+ *  Copyright (C) 2007 Mindspeed Technologies, Inc. 
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifdef PFE_APPLICATION_SUPPORT
+#include <linux/version.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <fci_pfe.h>
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Freescale Technologies");
+MODULE_DESCRIPTION("PFE Application");
+
+
+typedef struct fpp_stat_flow_status_cmd {
+        u_int8_t        action;
+        u_int8_t        ip_family;
+        u_int16_t       Protocol;
+
+        union {
+                struct {
+                        u_int32_t       Saddr;          /*Source IPv4 address*/
+                        u_int32_t       Daddr;          /*Destination IPv4 address*/
+                };
+                struct {
+                        u_int32_t       Saddr_v6[4];            /*Source IPv6 address*/
+                        u_int32_t       Daddr_v6[4];            /*Destination IPv6 address*/
+                };
+        };
+
+        u_int16_t       Sport;          /*Source Port*/
+        u_int16_t       Dport;          /*Destination Port*/
+} __attribute__((__packed__)) fpp_stat_flow_status_cmd_t;
+
+typedef struct fpp_stat_flow_entry_response {
+        u_int16_t       ackstatus;
+        u_int8_t        ip_family;
+        u_int8_t        pad1;
+        u_int16_t       pad2;
+        u_int16_t       Protocol;
+
+        union {
+                struct {
+                        u_int32_t       Saddr;          /*Source IPv4 address*/
+                        u_int32_t       Daddr;          /*Destination IPv4 address*/
+                };
+                struct {
+                        u_int32_t       Saddr_v6[4];            /*Source IPv6 address*/
+                        u_int32_t       Daddr_v6[4];            /*Destination IPv6 address*/
+                };
+        };
+
+        u_int16_t       Sport;          /*Source Port*/
+        u_int16_t       Dport;          /*Destination Port*/
+        u_int32_t       TotalPackets;
+        u_int64_t       TotalBytes;
+} __attribute__((__packed__)) fpp_stat_flow_entry_response_t;
+
+/*
+ * fci_module_init -
+ *
+ */
+static int pfe_test_init(void)
+{
+	fpp_stat_flow_status_cmd_t flowStatusCmd;
+	fpp_stat_flow_entry_response_t *pflowStatusResp;
+	pfe_ctrl_cmd cmd;
+	int rc;
+
+	printk(KERN_DEBUG "pfe test application entry\n");
+
+	flowStatusCmd.action = 2; /* Query */
+	flowStatusCmd.ip_family = 4; /* IPv4 address */
+	flowStatusCmd.Protocol = 17; /* UDP */
+	flowStatusCmd.Saddr = htonl(0xc0a8010a); /* 192.168.1.105 */
+	flowStatusCmd.Daddr = htonl(0xc0a8020a); /* 192.168.2.10 */
+	flowStatusCmd.Sport = port_index;
+	flowStatusCmd.Dport = port_index;
+
+	memcpy(cmd.msg.buf, &flowStatusCmd, sizeof(flowStatusCmd));
+	cmd.msg.fcode = 0x0E0F; /* FPP_CMD_STAT_FLOW command value */ 
+	cmd.msg.length = sizeof(flowStatusCmd); 
+	
+	if ((rc = fci_kernel_inbound_parser(&cmd)) < 0)
+	{
+		printk(KERN_DEBUG "ERROR: fci_kernel_inbound_parser() failed, return value %d\n", rc);
+		return 0;
+	}
+	if (cmd.rep.length != sizeof(fpp_stat_flow_entry_response_t))
+	{
+		printk(KERN_DEBUG "ERROR: Unexpected result retunred from PFE rc:%04x rcvBytes <%x>\n",
+                                          (cmd.rep.length < sizeof(unsigned short) ) ? 0 : *((unsigned short *)cmd.rep.buf), cmd.rep.length);
+		return 0;
+	}
+	
+	pflowStatusResp = (fpp_stat_flow_entry_response_t *)(cmd.rep.buf);
+	
+	printk(KERN_DEBUG "no. of packets %u no of bytes %llu\n", pflowStatusResp->TotalPackets, pflowStatusResp->TotalBytes);
+	/* Create /proc/fci entry */
+	printk(KERN_DEBUG "pfe test application return\n");
+
+	return 0;
+}
+
+
+/*
+ * fci_module_exit -
+ *
+ */
+static void pfe_test_exit(void)
+{
+	printk(KERN_DEBUG "Unloading pfe test application\n");
+
+	return;
+}
+
+
+module_init(pfe_test_init);
+module_exit(pfe_test_exit);
+#endif
