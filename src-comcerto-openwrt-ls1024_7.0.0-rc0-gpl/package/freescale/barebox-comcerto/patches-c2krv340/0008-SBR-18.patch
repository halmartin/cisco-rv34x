From 3b62576fd17711355815c6337f5d4669d65c4d5a Mon Sep 17 00:00:00 2001
From: Vinaykumar Masane <vinaykumar.masane@freescale.com>
Date: Tue, 21 Jul 2015 17:00:15 +0530
Subject: [PATCH 08/60] SBR-18

Addressed SBR-9 review comments and some enhancements

Signed-off-by: Vinaykumar Masane <vinaykumar.masane@freescale.com>
---
 commands/boardinfo.c | 209 ++++++++++++++++++++++++++-------------------------
 1 file changed, 107 insertions(+), 102 deletions(-)

diff --git a/commands/boardinfo.c b/commands/boardinfo.c
index e810b9f..2c6f513 100644
--- a/commands/boardinfo.c
+++ b/commands/boardinfo.c
@@ -1,6 +1,6 @@
 /*
- * Copyright (c) 2015 Vinaykumar Masane <vinaykumar.masane@freescale>, 
- * Freescale Semicondunctors Pvt. Ltd. 
+ * Copyright (c) 2015 Vinaykumar Masane <vinaykumar.masane@freescale>,
+ * Freescale Semicondunctors Pvt. Ltd.
  *
  * See file CREDITS for list of people who contributed to this
  * project.
@@ -50,148 +50,145 @@ char *filename = "/dev/spi1.board-info" ;
 static int command_boardinfo_update(int argc, char *argv[])
 {
   int ret = 0, fd = -1, n_written = 0;
-	int i, len = 0, isOctetFull = 0, n_mac_octet = 0, n_colons = 0;
+  int i, len = 0, isOctetFull = 0, n_mac_octet = 0;
   char c = '\0';
- 
   c2krv340 board_data;
 
-  flush(stdin); 
-  
-	memset(&board_data, 0x00, sizeof(board_data));
+  flush(stdin);
+
+  memset(&board_data, 0x00, sizeof(board_data));
+
   printf("\nEnter PID : ");
   while (len < sizeof(board_data.pid))
   {
-		c = getc();
-		if ( isalnum(c) || c == 0x0A || c == 0x0D || c == 0x2D )
-			putchar(c);
-		else
-		{
-			printf("\n c = 0x%X Input Error! %s", c, help_string);
-			return COMMAND_ERROR;
-		}
-    if ( c == 0x0D)
+    c = getc();
+    if ( isalnum(c) || c == 0x0A || c == 0x0D || c == 0x2D )
+      putchar(c);
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == 0x0D )
     {
       break;
     }
     board_data.pid[len++] = c;
   }
-  
+
   len = 0;
   printf("\nEnter VID : ");
   while (len < sizeof(board_data.vid))
   {
-		c = getc();
-		if ( isalnum(c) || c == 0x0A || c == 0x0D || c == 0x2D )
-			putchar(c);
-		else
-		{
-			printf("\n c = 0x%X Input Error! %s", c, help_string);
-			return COMMAND_ERROR;
-		}
-    if ( c == 0x0D)
+    c = getc();
+    if ( isalnum(c) || c == 0x0A || c == 0x0D )
+      putchar(c);
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == 0x0D )
     {
       break;
     }
-		board_data.vid[len++] = c;
+    board_data.vid[len++] = c;
   }
 
   len = 0;
   printf("\nEnter S/N : ");
   while (len < sizeof(board_data.s_n))
   {
-		c = getc();
-		if ( isalnum(c) || c == 0x0A || c == 0x0D || c == 0x2D )
-			putchar(c);
-		else
-		{
-			printf("\n c = 0x%X Input Error! %s", c, help_string);
-			return COMMAND_ERROR;
-		}
-    if ( c == 0x0D)
+    c = getc();
+    if ( isalnum(c) || c == 0x0A || c == 0x0D || c == 0x2D )
+      putchar(c);
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == 0x0D )
     {
       break;
     }
-		board_data.s_n[len++] = c;
+    board_data.s_n[len++] = c;
   }
 
-	for (i=0; i<3; i++)
-	{
-		isOctetFull = 0;
-    n_colons = 0;
+  for (i=0; i<3; i++)
+  {
+    isOctetFull = 0;
     n_mac_octet = 0;
     printf("\nEnter %-5s MAC : ",  i == 0 ? "LAN" : (i == 1 ? "WAN-1" : "WAN-2"));
-    while ((n_mac_octet < 6) && (n_colons < 6)) 
+    while (n_mac_octet < 6)
     {
-		  c = getc();
-		  putchar(c);
-			if ((isxdigit(c)) && ( isOctetFull < 2 ))
-		  {
+      c = getc();
+      putchar(c);
+      if ((isxdigit(c)) && ( isOctetFull < 2 ))
+      {
         unsigned char offset = 0;
-				offset = islower(c) ? 0x57 : isupper(c) ? 0x37 : isdigit(c) ? 0x30 : 0;
-				if ( isOctetFull == 0 )
-				{
-				  board_data.mac[i][n_mac_octet] = ((unsigned int)c - offset) << 4;
-				  isOctetFull = 1;
-				}
-				else if ( isOctetFull == 1 )
-				{
-				  board_data.mac[i][n_mac_octet] |= (((unsigned int)c - offset) & 0xFF);
+        offset = islower(c) ? 0x57 : isupper(c) ? 0x37 : isdigit(c) ? 0x30 : 0;
+        if ( isOctetFull == 0 )
+        {
+          board_data.mac[i][n_mac_octet] = ((unsigned int)c - offset) << 4;
+          isOctetFull = 1;
+        }
+        else if ( isOctetFull == 1 )
+        {
+          board_data.mac[i][n_mac_octet] |= (((unsigned int)c - offset) & 0xFF);
           ++n_mac_octet;
-					isOctetFull = 2;
-				}
-		  }
-		  else if ((  c == ':' ) && ( isOctetFull == 2 ))
-			{
-			  ++n_colons;
-				isOctetFull = 0;
-				continue;
+          isOctetFull = 2;
+        }
+      }
+      else if ((  c == ':' ) && ( isOctetFull == 2 ))
+      {
+        isOctetFull = 0;
+        continue;
       }
       else
       {
-				printf("\n c = 0x%X Input Error! %s", c, help_string);
+        printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
         return COMMAND_ERROR;
       }
-		}
+    }
   }
   fd = open(filename, O_RDWR, 0);
-	if (fd < 0) {
-		printf("could not open %s!\n", filename);
+  if (fd < 0) {
+    printf("could not open %s!\n", filename);
     return COMMAND_ERROR;
-	}
+  }
 
   /* ENOSYS is no error here, many devices do not need it */
   if (ret && errno != -ENOSYS) {
     printf("could not unprotect %s: %s\n", filename, errno_str());
     close(fd);
-		printf("\n");
+    printf("\n");
     return COMMAND_ERROR;
   }
-  
-	/* Erase Board Info Partition */
+
+  /* Erase Board Info Partition */
   ret = erase(fd, ~0, 0);
 
   /* ENOSYS is no error here, many devices do not need it */
   if (ret && errno != -ENOSYS) {
     printf("could not erase %s: %s\n", filename, errno_str());
     close(fd);
-		printf("\n");
+    printf("\n");
     return COMMAND_ERROR;
-  }    
+  }
   printf("\nOpened file %s for WRITTING...\n", filename);
   n_written = write(fd, (char *)&board_data, sizeof(board_data));
   printf("\n Wrote %d bytes out of %d input bytes\n", n_written, (int)sizeof(board_data));
   close(fd);
-	printf("\n");
-	return COMMAND_SUCCESS;
+  printf("\n");
+  return COMMAND_SUCCESS;
 }
 
 static int command_boardinfo_show(int argc, char *argv[])
 {
-  int fd = -1, n_read = 0;
-  int i = 0;
+  int fd = -1, n_read = 0, i = 0;
   char out_str[18] = {0};
   c2krv340 *board_data = NULL;
-    
+
   fd = open(filename, O_RDONLY, 0);
   if (fd < 0) {
     printf("could not open %s!\n", filename);
@@ -199,6 +196,14 @@ static int command_boardinfo_show(int argc, char *argv[])
   }
   printf("\nOpened file %s for READING...", filename);
   board_data = (c2krv340 *)xmalloc(sizeof(c2krv340));
+  if ( board_data = NULL )
+  {
+    printf("Error %d! : %s\n", errno, errno_str());
+    close(fd);
+    printf("\n");
+    return COMMAND_ERROR;
+  }
+
   memset((char *)board_data, 0x00, sizeof(c2krv340));
   n_read = read(fd, (char *)board_data, sizeof(c2krv340));
   printf("Read %d bytes out of %d bytes\n", n_read, sizeof(c2krv340));
@@ -230,39 +235,39 @@ static int command_boardinfo_show(int argc, char *argv[])
       putchar(' ');
   }
   flush(stdout);
-  
+
   for (i=0; i<3; i++)
-	{
-		memset(out_str, 0x00, sizeof(out_str));
-		sprintf(out_str,"%02X:%02X:%02X:%02X:%02X:%02X",\
-											(unsigned char)board_data->mac[i][0],\
-											(unsigned char)board_data->mac[i][1],\
-											(unsigned char)board_data->mac[i][2],\
-											(unsigned char)board_data->mac[i][3],\
-											(unsigned char)board_data->mac[i][4],\
-											(unsigned char)board_data->mac[i][5]);
-		printf("\n%-5s MAC : %s", i == 0 ? "LAN" : i == 1 ? "WAN-1" : "WAN-2", out_str);
-	}
+  {
+    memset(out_str, 0x00, sizeof(out_str));
+    sprintf(out_str,"%02X:%02X:%02X:%02X:%02X:%02X",\
+                      (unsigned char)board_data->mac[i][0],\
+                      (unsigned char)board_data->mac[i][1],\
+                      (unsigned char)board_data->mac[i][2],\
+                      (unsigned char)board_data->mac[i][3],\
+                      (unsigned char)board_data->mac[i][4],\
+                      (unsigned char)board_data->mac[i][5]);
+    printf("\n%-5s MAC : %s", i == 0 ? "LAN" : i == 1 ? "WAN-1" : "WAN-2", out_str);
+  }
   free(board_data);
-	printf("\n");
-	return COMMAND_SUCCESS;
+  printf("\n");
+  return COMMAND_SUCCESS;
 }
 
 static int do_boardinfo(struct command *cmdtp, int argc, char *argv[])
 {
-	if (strcmp(argv[1], "-u") == 0)
+  if (strcmp(argv[1], "-u") == 0)
   {
-		command_boardinfo_update(argc, argv);
+    command_boardinfo_update(argc, argv);
   }
-	else if (strcmp(argv[1], "-s") == 0)
-	{
+  else if (strcmp(argv[1], "-s") == 0)
+  {
     command_boardinfo_show(argc, argv);
   }
-	else
+  else
   {
-		return COMMAND_ERROR_USAGE;
+    return COMMAND_ERROR_USAGE;
   }
-	return COMMAND_SUCCESS;
+  return COMMAND_SUCCESS;
 }
 
 static const __maybe_unused char cmd_boardinfo_help[] =
@@ -281,7 +286,7 @@ static const __maybe_unused char cmd_boardinfo_help[] =
 ;
 
 BAREBOX_CMD_START(boardinfo)
-	.cmd		= do_boardinfo,
-	.usage		= "Read / Update Board Information",
-	BAREBOX_CMD_HELP(cmd_boardinfo_help)
+  .cmd    = do_boardinfo,
+  .usage    = "Read / Update Board Information",
+  BAREBOX_CMD_HELP(cmd_boardinfo_help)
 BAREBOX_CMD_END
-- 
2.7.4

