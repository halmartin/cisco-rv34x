From c32cf077f786225ffb091c1468f824cc5618e229 Mon Sep 17 00:00:00 2001
From: Vinaykumar Masane <vinaykumar.masane@freescale.com>
Date: Wed, 23 Sep 2015 20:35:54 +0530
Subject: [PATCH 17/60] Added Board Info License Manager Parameters' Support

Signed-off-by: Vinaykumar Masane <vinaykumar.masane@freescale.com>
---
 commands/boardinfo.c | 336 ++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 291 insertions(+), 45 deletions(-)

diff --git a/commands/boardinfo.c b/commands/boardinfo.c
index 58fb31b..ed83697 100644
--- a/commands/boardinfo.c
+++ b/commands/boardinfo.c
@@ -39,6 +39,13 @@
 #define SIZE_PID 11  /* Max 11 Character Product ID */
 #define SIZE_VID  3  /* Max  3 Character H/W Version */
 #define SIZE_S_N 11  /* Max 11 Character Board Serial Number */
+#define SIZE_P_N 12  /* Max 11 Character Board Serial Number */
+#define SIZE_SW_VER 4  /* Max 11 Character Board Serial Number */
+#define SIZE_PROD_NAME 60  /* Max 11 Character Board Serial Number */
+#define SIZE_PROD_SERIES 16  /* Max 11 Character Board Serial Number */
+#define SIZE_SW_DESC 128  /* Max 11 Character Board Serial Number */
+#define SIZE_SW_OBJID 32  /* Max 11 Character Board Serial Number */
+
 
 #define COUNT_MAC        3 /* 3 MAC-IDs one each for LAN, WAN-1, WAN-2 */
 #define TOTAL_MAC_OCTET  6 /* No. of MAC Octets in MAC ID */
@@ -49,12 +56,17 @@
 #define OFFSET_DIGIT 0x30
 
 typedef struct c2krv340_board_info {
-  char pid[12];             /* Product ID */
-  char vid[4];              /* H/W Version */
-  char s_n[12];             /* Board Serial Number */
-  unsigned char mac[3][8]  __attribute__ ((aligned (8)));  /* MAC Information */
-} c2krv340;
-
+  unsigned char pid[16];             /* type 1byte length 1byte data 12 Product ID */
+  unsigned char vid[8];              /* H/W Version */
+  unsigned char s_n[16];             /* Board Serial Number */
+  unsigned char mac[3][8];           /* MAC Information */
+  unsigned char p_n[16];             /* Board Serial Number */
+  unsigned char sw_ver[16];          /* Board Sowftware Version */
+  unsigned char prod_name[64];       /* Board Product Name */
+  unsigned char prod_series[16];     /* Board Product Series */
+  unsigned char sw_desc[128];        /* Board Software Description */
+  unsigned char sw_objid[32];        /* Board Software Object Id */
+}  __attribute__ ((__packed__)) c2krv340;
 
 char *help_string = "Check Usage: boardinfo <Enter>\n";
 char *filename = "/dev/spi1.board-info" ;
@@ -62,9 +74,11 @@ char *filename = "/dev/spi1.board-info" ;
 static int command_boardinfo_mac(int argc, char *argv[])
 {
   int fd = -1, n_read = 0, i = 0;
-  char out_str[18] = {0}, ifname[6] = {0};
+  unsigned char out_str[18] = {0}, ifname[6] = {0};
   c2krv340 *board_data = NULL;
-
+  unsigned char macdata[512];
+  int mac_offset,j;
+  int count=2;
   fd = open(filename, O_RDONLY, 0);
   if (fd < 0) {
     printf("could not open %s!\n", filename);
@@ -80,8 +94,8 @@ static int command_boardinfo_mac(int argc, char *argv[])
     return COMMAND_ERROR;
   }
 
-  memset((char *)board_data, 0x00, sizeof(c2krv340));
-  if ( (n_read = read(fd, (char *)board_data, sizeof(c2krv340))) < 0 )
+  memset((char *)macdata, 0x00, sizeof(macdata));
+  if ( (n_read = read(fd, macdata, sizeof(c2krv340))) < 0 )
   {
     printf("Read Error %d! : %s\n", errno, errno_str());
     free(board_data);
@@ -91,10 +105,24 @@ static int command_boardinfo_mac(int argc, char *argv[])
   close(fd);
   flush(stdout);
 
+  mac_offset=macdata[1];
+  printf("pid:%x\n",mac_offset);
+  count=count + mac_offset;
+  mac_offset=macdata[count+1];
+  printf("vid:%x\n",mac_offset);
+  count=count + mac_offset+2;
+  mac_offset=macdata[count+1];
+  printf("ser:%x\n",mac_offset);
+
+  count = count+mac_offset+2;
   for (i = 0; i < COUNT_MAC; i++)
   {
     memset(ifname, 0x00, sizeof(ifname));
     memset(out_str, 0x00, sizeof(out_str));
+    count = count+2;
+    for(j=0;j<6;j++)
+       board_data->mac[i][j] = macdata[count++];
+
     sprintf(out_str,"%02X:%02X:%02X:%02X:%02X:%02X",\
                       (unsigned char)board_data->mac[i][0],\
                       (unsigned char)board_data->mac[i][1],\
@@ -115,8 +143,12 @@ static int command_boardinfo_mac(int argc, char *argv[])
 static int command_boardinfo_update(int argc, char *argv[])
 {
   int ret = 0, fd = -1, n_written = 0;
-  int i, len = 0, n_mac_octet = 0;
+  int i, j, len = 2, n_mac_octet = 0;
   char c = '\0';
+  unsigned char type = 0xFF;
+  unsigned int count=2;
+  unsigned char boarddata[512] = {'\0'};
+  unsigned char macdata[3][6];
   enum mac_octet_state {
     empty = 0,
     half  = 1,
@@ -130,7 +162,7 @@ static int command_boardinfo_update(int argc, char *argv[])
   memset(&board_data, 0x00, sizeof(board_data));
 
   printf("\nEnter PID : ");
-  while (len < SIZE_PID)
+  while (len < (SIZE_PID + 2))
   {
     c = getc();
     if ( isalnum(c) || c == KEY_CR || c == '-' )
@@ -147,12 +179,17 @@ static int command_boardinfo_update(int argc, char *argv[])
     {
       break;
     }
-    board_data.pid[len++] = c;
+    len++;
+    boarddata[count++] = c;
   }
+  type = 0xCB;
+  boarddata[count - len] = type;
+  boarddata[count - len + 1] = len - 2;
 
-  len = 0;
+  len = 2;
+  count = count+len;
   printf("\nEnter VID : ");
-  while (len < SIZE_VID)
+  while (len < (SIZE_VID + 2))
   {
     c = getc();
     if ( isalnum(c) || c == KEY_CR )
@@ -169,12 +206,17 @@ static int command_boardinfo_update(int argc, char *argv[])
     {
       break;
     }
-    board_data.vid[len++] = c;
+    len++;
+    boarddata[count++] = c;
   }
+  type = 0x89;
+  boarddata[count - len] = type;
+  boarddata[count - len + 1] = len - 2;
 
-  len = 0;
+  len = 2;
   printf("\nEnter S/N : ");
-  while (len < SIZE_S_N)
+  count = count+len;
+  while (len < (SIZE_S_N + 2 ))
   {
     c = getc();
     if ( isalnum(c) || c == KEY_CR )
@@ -191,15 +233,22 @@ static int command_boardinfo_update(int argc, char *argv[])
     {
       break;
     }
-    board_data.s_n[len++] = c;
+    len++;
+    boarddata[count++] = c;
   }
+    type = 0xC1;
+    boarddata[count - len ] = type;
+    boarddata[count - len +1] = len-2;
 
   for (i = 0; i < COUNT_MAC; i++)
   {
     isOctetFull = empty;
     n_mac_octet = 0;
+    type = 0xC3;
+    boarddata[count++] = type;
+    boarddata[count++] = 6;
     printf("\nEnter %-5s MAC : ",  i == 0 ? "LAN" : (i == 1 ? "WAN1" : "WAN2"));
-    while (n_mac_octet < TOTAL_MAC_OCTET)
+    while (n_mac_octet < (TOTAL_MAC_OCTET))
     {
       c = toupper(getc());
       putchar(c);
@@ -209,12 +258,12 @@ static int command_boardinfo_update(int argc, char *argv[])
         offset = isupper(c) ? OFFSET_ALPHA : isdigit(c) ? OFFSET_DIGIT : 0;
         if ( isOctetFull == empty )
         {
-          board_data.mac[i][n_mac_octet] = ((unsigned int)c - offset) << 4;
+          macdata[i][n_mac_octet] = ((unsigned int)c - offset) << 4;
           isOctetFull = half;
         }
         else if ( isOctetFull == half )
         {
-          board_data.mac[i][n_mac_octet] |= (((unsigned int)c - offset) & 0xFF);
+          macdata[i][n_mac_octet] |= (((unsigned int)c - offset) & 0xFF);
           ++n_mac_octet;
           isOctetFull = full;
         }
@@ -230,7 +279,188 @@ static int command_boardinfo_update(int argc, char *argv[])
         return COMMAND_ERROR;
       }
     }
+    for (j=0;j<6;j++)
+      boarddata[count++] = macdata[i][j];
+  }
+
+  printf("\nEnter Part No: ");
+  len=2;
+  count=count+len;
+  while (len < (SIZE_P_N + 2))
+  {
+    c = getc();
+
+    if ( isprint(c))
+    {
+      c = toupper(c);
+      putchar(c);
+    }
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == KEY_CR )
+    {
+      break;
+    }
+    len++;
+    boarddata[count++] = c;
+   }
+  type = 0xC0;
+  boarddata[count - len ] = type;
+  boarddata[count - len +1] = len-2;
+
+  printf("\nEnter SW Version: ");
+  len=2;
+  count=count+len;
+  while (len < (SIZE_SW_VER + 2))
+  {
+    c = getc();
+    if (c == KEY_CR)
+      break;
+
+    if ( isprint(c))
+    {
+      c = toupper(c);
+      putchar(c);
+    }
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == KEY_CR )
+    {
+      break;
+    }
+    len++;
+    boarddata[count++] = c;
+  }
+  type = 0x8C;
+  boarddata[count - len ] = type;
+  boarddata[count - len +1] = len-2;
+
+  printf("\nEnter PROD Name: ");
+  len=2;
+  count=count+len;
+  while (len < (SIZE_PROD_NAME + 2))
+  {
+    c = getc();
+    if (c == KEY_CR)
+      break;
+
+    if ( isprint(c))
+    {
+      c = toupper(c);
+      putchar(c);
+    }
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == KEY_CR )
+    {
+      break;
+    }
+    len++;
+    boarddata[count++] = c;
+  }
+  type = 0xDB;
+  boarddata[count - len ] = type;
+  boarddata[count - len +1] = len-2;
+
+  printf("\nEnter PROD Series: ");
+  len=2;
+  count=count+len;
+  while (len < (SIZE_PROD_SERIES + 2))
+  {
+    c = getc();
+    if (c == KEY_CR)
+      break;
+
+    if ( isprint(c))
+    {
+      c = toupper(c);
+      putchar(c);
+    }
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == KEY_CR )
+    {
+      break;
+    }
+    len++;
+    boarddata[count++] = c;
+  }
+  type = 0x00;
+  boarddata[count - len ] = type;
+  boarddata[count - len +1] = len-2;
+
+  printf("\nEnter SOFTWARE Description: ");
+  len=2;
+  count=count+len;
+  while (len < (SIZE_SW_DESC + 2))
+  {
+    c = getc();
+    if (c == KEY_CR)
+      break;
+
+    if ( isprint(c))
+    {
+      c = toupper(c);
+      putchar(c);
+    }
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == KEY_CR )
+    {
+      break;
+    }
+    len++;
+    boarddata[count++] = c;
+  }
+  type = 0x00;
+  boarddata[count - len ] = type;
+  boarddata[count - len +1] = len-2;
+
+  printf("\nEnter SOFTWARE Objectid: ");
+  len=2;
+  count=count+len;
+  while (len < (SIZE_SW_OBJID + 2))
+  {
+    c = getc();
+    if (c == KEY_CR)
+      break;
+
+    if ( isprint(c))
+    {
+      c = toupper(c);
+      putchar(c);
+    }
+    else
+    {
+      printf("\n c = %c : 0x%X Input Error! %s", c, c, help_string);
+      return COMMAND_ERROR;
+    }
+    if ( c == KEY_CR )
+    {
+      break;
+    }
+    len++;
+    boarddata[count++] = c;
   }
+  type = 0x00;
+  boarddata[count - len ] = type;
+  boarddata[count - len +1] = len-2;
+
   fd = open(filename, O_RDWR, 0);
   if (fd < 0) {
     printf("could not open %s!\n", filename);
@@ -248,13 +478,12 @@ static int command_boardinfo_update(int argc, char *argv[])
     return COMMAND_ERROR;
   }
   printf("\nOpened file %s for WRITTING...\n", filename);
-  if ( (n_written = write(fd, (char *)&board_data, sizeof(board_data))) < 0 )
+  if ( (n_written = write(fd, boarddata, sizeof(boarddata))) < 0 )
   {
     printf("Write Error %d! : %s\n", errno, errno_str());
     close(fd);
     return COMMAND_ERROR;
   }
-  printf("\n Wrote %d bytes out of %d input bytes\n", n_written, (int)sizeof(board_data));
   close(fd);
   printf("\n");
   return COMMAND_SUCCESS;
@@ -262,9 +491,14 @@ static int command_boardinfo_update(int argc, char *argv[])
 
 static int command_boardinfo_show(int argc, char *argv[])
 {
-  int fd = -1, n_read = 0, i = 0;
+  int fd = -1, n_read = 0, i = 0, count=2;
   char out_str[18] = {0}, ifname[6] = {0};
   c2krv340 *board_data = NULL;
+  char buf_boarddata[512];
+  unsigned char mac_data[3][8];
+  int mac_length = 0;
+  int j = 0, pid_length, vid_length, sn_length;
+
 
   fd = open(filename, O_RDONLY, 0);
   if (fd < 0) {
@@ -281,8 +515,8 @@ static int command_boardinfo_show(int argc, char *argv[])
     return COMMAND_ERROR;
   }
 
-  memset((char *)board_data, 0x00, sizeof(c2krv340));
-  if ( (n_read = read(fd, (char *)board_data, sizeof(c2krv340))) < 0 )
+  memset((char *)buf_boarddata, 0x00, sizeof(buf_boarddata));
+  if ( (n_read = read(fd, (char *)buf_boarddata, sizeof(buf_boarddata))) < 0 )
   {
     printf("Read Error %d! : %s\n", errno, errno_str());
     free(board_data);
@@ -294,49 +528,61 @@ static int command_boardinfo_show(int argc, char *argv[])
   flush(stdout);
 
   printf("\nPID  : ");
-  for(i = 0; i < SIZE_PID; i++)
+  pid_length = buf_boarddata[1];
+  for (i=0;i<pid_length;i++)
   {
-    if (isprint(*((char *)board_data->pid + i)))
-      putchar(*((char *)board_data->pid + i));
+    if (isprint(buf_boarddata[count]))
+      putchar(buf_boarddata[count]);
     else
       putchar(' ');
+    count++;
   }
 
   printf("\nVID  : ");
-  for(i = 0; i < SIZE_VID; i++)
+  vid_length = buf_boarddata [count+1];
+  count = count+2;
+  for (i=0;i<vid_length;i++)
   {
-    if (isprint(*((char *)board_data->vid + i)))
-      putchar(*((char *)board_data->vid + i));
+    if (isprint(buf_boarddata[count]))
+      putchar(buf_boarddata[count]);
     else
       putchar(' ');
+    count++;
   }
 
   printf("\nS/N  : ");
-  for(i = 0; i < SIZE_S_N; i++)
+  sn_length = buf_boarddata [count+1];
+  count = count+2;
+  for (i=0;i<sn_length;i++)
   {
-    if (isprint(*((char *)board_data->s_n + i)))
-      putchar(*((char *)board_data->s_n + i));
+    if (isprint(buf_boarddata[count]))
+      putchar(buf_boarddata[count]);
     else
       putchar(' ');
+    count++;
   }
-  flush(stdout);
-
   for (i = 0; i < COUNT_MAC; i++)
   {
+    mac_length=buf_boarddata[count+1];
+    count = count+2;
+    for (j=0;j<mac_length;j++)
+    {
+      mac_data[i][j] = buf_boarddata[count++];
+    }
     memset(ifname, 0x00, sizeof(ifname));
     memset(out_str, 0x00, sizeof(out_str));
     sprintf(out_str,"%02X:%02X:%02X:%02X:%02X:%02X",\
-                      (unsigned char)board_data->mac[i][0],\
-                      (unsigned char)board_data->mac[i][1],\
-                      (unsigned char)board_data->mac[i][2],\
-                      (unsigned char)board_data->mac[i][3],\
-                      (unsigned char)board_data->mac[i][4],\
-                      (unsigned char)board_data->mac[i][5]);
+                      (unsigned char)mac_data[i][0],\
+                      (unsigned char)mac_data[i][1],\
+                      (unsigned char)mac_data[i][2],\
+                      (unsigned char)mac_data[i][3],\
+                      (unsigned char)mac_data[i][4],\
+                      (unsigned char)mac_data[i][5]);
+
     sprintf(ifname,"%s", i == 0 ? "LAN" : (i == 1 ? "WAN1" : "WAN2"));
     printf("\n%-4s MAC : %s", ifname, out_str);
     setenv(ifname, out_str);
   }
-
   free(board_data);
   printf("\n");
   return COMMAND_SUCCESS;
-- 
2.7.4

