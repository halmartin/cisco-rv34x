diff -ruaN a/src/header/rtdot1x.h b/src/header/rtdot1x.h
--- a/src/header/rtdot1x.h	2016-08-29 16:36:10.394510462 +0530
+++ b/src/header/rtdot1x.h	2016-08-29 16:37:06.374509922 +0530
@@ -111,6 +111,11 @@
 #endif
 /** RV345 **/
 
+enum {
+ PROD_TYPE_RV_340,
+ PROD_TYPE_RV_345,
+};
+
 
 #ifndef IEEE_8021X_MAX_PKT_SIZE
 #define IEEE_8021X_MAX_PKT_SIZE 2048
@@ -142,9 +147,13 @@
 struct ieee8023_hdr {
 	u8 dAddr[6];
 	u8 sAddr[6];
-#if 0 
-	u8 cpu_tag[8];
-#endif
+	u16 eth_type;
+} __attribute__ ((packed));
+
+struct ieee8023_hdr_with_cputag {
+	u8 dAddr[6];
+	u8 sAddr[6];
+	u8 tx_cpu_tag[12];
 	u16 eth_type;
 } __attribute__ ((packed));
 
diff -ruaN a/src/source/eapol_sm.c b/src/source/eapol_sm.c
--- a/src/source/eapol_sm.c	2016-08-29 16:38:01.718509388 +0530
+++ b/src/source/eapol_sm.c	2016-08-29 16:43:02.270506488 +0530
@@ -11,7 +11,7 @@
 #include "eapol_sm.h"
 #include "eloop.h"
 
-extern char PID_RV34X[10];
+extern u8 rv_prod_type_g;
 extern int get_physical_portno(uint16_t nas_port);
 
 
@@ -608,11 +608,11 @@
 	
 	memset(str, 0 , MAX_COMMAND_STR);
 
-	 if (strcmp(PID_RV34X,"RV340") == 0)
+	if (rv_prod_type_g == PROD_TYPE_RV_340)
         {
                 sprintf(str, "rtkssdk dot1x -p %d -g 1", aid);
         }
-        else if (strcmp(PID_RV34X,"RV345") == 0)
+        else if (rv_prod_type_g == PROD_TYPE_RV_345)
         {
                  sprintf(str, "rtkssdk_diag -S 1 -p %d -g 1", aid);
                 if(NULL != (fp = popen(str,"r")))
diff -ruaN a/src/source/ieee802_1x.c b/src/source/ieee802_1x.c
--- a/src/source/ieee802_1x.c	2016-08-29 16:43:51.138506016 +0530
+++ b/src/source/ieee802_1x.c	2016-08-29 16:43:38.410506139 +0530
@@ -37,11 +37,11 @@
 #include <arpa/inet.h>
 
 #define SIZE 256
-extern char PID_RV34X[10];
+extern u8 rv_prod_type_g;
 
 int get_physical_portno(uint16_t nas_port)
 {
-	if (strcmp(PID_RV34X,"RV340") == 0) 
+	if (rv_prod_type_g  == PROD_TYPE_RV_340) 
 	{
 		switch(nas_port)
 		{
@@ -54,7 +54,7 @@
         	}
 
 	}
-	else if (strcmp(PID_RV34X,"RV345") == 0) 
+	else if (rv_prod_type_g  == PROD_TYPE_RV_345) 
 	{
         	switch(nas_port)
         	{
@@ -155,7 +155,86 @@
   pclose(fp);
   return 0;
 }
- 
+
+
+static void ieee802_1x_insertCPUTag(u8 *pkt, u8 port_id)
+{
+	u16 cpuTagId = 0x8899;
+
+	pkt[0] = ((cpuTagId >> 8) & 0xFF); 
+	pkt[1] = (cpuTagId & 0xFF);
+	pkt[2] = 0x04; /* Protocol */
+	pkt[3] = 0x10; /* BP_FLTR2 */
+	pkt[4] = 0x02; /* AS_DPM */
+	pkt[5] = 0x0;
+	pkt[6] = 0x0;
+	pkt[7] = 0x0;
+	pkt[8] = 0x0;
+	pkt[9] = 0x0;
+	if(port_id > 7)
+		pkt[10] = 0x1 << (port_id - 8);
+	else
+		pkt[11] = 0x1 << port_id;
+	return;
+}
+
+static void ieee802_1x_send_with_cputag(rtapd *rtapd, struct sta_info *sta, u8 type, u8 *data, size_t datalen)
+{
+	char *buf;
+	struct ieee8023_hdr_with_cputag *hdr3;
+	struct ieee802_1x_hdr *xhdr;
+	size_t len;
+	u8 *pos;
+   
+	len = sizeof(*hdr3) + 2+ sizeof(*xhdr) +datalen;
+	buf = (char *) malloc(len);
+	if (buf == NULL)
+	{
+		DBGPRINT(RT_DEBUG_ERROR,"malloc() failed for ieee802_1x_send_with_cputag(len=%d)\n", len);
+		return;
+	}
+	DBGPRINT(RT_DEBUG_TRACE,"Send to Sta(%s%d) with Identifier %d\n", rtapd->prefix_wlan_name, sta->aid,*(data+1));
+	memset(buf, 0, len);
+	hdr3 = (struct ieee8023_hdr_with_cputag *) buf;
+	memcpy(hdr3->dAddr, sta->addr, ETH_ALEN);
+	memcpy(hdr3->sAddr, rtapd->own_addr[0], ETH_ALEN);
+
+	ieee802_1x_insertCPUTag(hdr3->tx_cpu_tag, sta->aid);
+
+//	memcpy(hdr3->sAddr, rtapd->own_addr[sta->ApIdx], ETH_ALEN);
+	if (sta->ethertype == ETH_P_PRE_AUTH)
+		(hdr3->eth_type) = htons(ETH_P_PRE_AUTH);
+	else
+		(hdr3->eth_type) = htons(ETH_P_PAE);
+
+	pos = (u8 *) (hdr3 + 1);
+	xhdr = (struct ieee802_1x_hdr *) pos;
+	if (sta->ethertype == ETH_P_PRE_AUTH)
+		xhdr->version = EAPOL_VERSION_2;
+	else
+		xhdr->version = EAPOL_VERSION;
+	xhdr->type = type;
+	xhdr->length = htons(datalen);
+
+	if (datalen > 0 && data != NULL)
+		memcpy(pos + LENGTH_8021X_HDR, data, datalen);
+	if (sta->ethertype == ETH_P_PRE_AUTH)
+	{
+		if (send(sta->SockNum/*rtapd->eth_sock*/, buf, len, 0) < 0)
+			perror("send[WPA2 pre-auth]");
+		DBGPRINT(RT_DEBUG_INFO,"ieee802_1x_send_cputag::WPA2, pre-auth, len=%d Ether-Type %x\n", len,sta->ethertype);
+	}
+	else
+	{
+		if (send(sta->SockNum/*rtapd->eth_sock*/, buf, len, 0) < 0)
+			perror("send[WPA2 eap]");
+		DBGPRINT(RT_DEBUG_INFO,"ieee802_1x_send_with_cputag::WPA2, eap, len=%d Ether-Type %x\n", len,hdr3->eth_type);
+	}
+
+	free(buf);
+	return;
+}
+
 static void ieee802_1x_send(rtapd *rtapd, struct sta_info *sta, u8 type, u8 *data, size_t datalen)
 {
 	char *buf;
@@ -171,7 +250,7 @@
 		DBGPRINT(RT_DEBUG_ERROR,"malloc() failed for ieee802_1x_send(len=%d)\n", len);
 		return;
 	}
-	DBGPRINT(RT_DEBUG_TRACE,"Send to Sta(%s%d) with Identifier %d\n", rtapd->prefix_wlan_name, sta->ApIdx,*(data+1));
+	DBGPRINT(RT_DEBUG_TRACE,"Send to Sta(%s%d) with Identifier %d\n", rtapd->prefix_wlan_name, sta->aid,*(data+1));
 	memset(buf, 0, len);
 	hdr3 = (struct ieee8023_hdr *) buf;
 	memcpy(hdr3->dAddr, sta->addr, ETH_ALEN);
@@ -216,6 +295,7 @@
 	}
 
 	free(buf);
+	return;
 }
 
 void ieee802_1x_set_sta_authorized(rtapd *rtapd, struct sta_info *sta, int authorized)
@@ -225,11 +305,11 @@
 	FILE *fp = NULL;
 	//rv340x_802_1x_SetPortStatus(sta->aid, authorized);
 
-	if (strcmp(PID_RV34X,"RV340") == 0)
+	if (rv_prod_type_g  == PROD_TYPE_RV_340)
 	{
         	sprintf(str, "rtkssdk dot1x -p %d -a %d\n",sta->aid,authorized);
 	}
-   	else if (strcmp(PID_RV34X,"RV345") == 0)
+   	else if (rv_prod_type_g  == PROD_TYPE_RV_345)
 	{
         	sprintf(str, "rtkssdk_diag -D -p %d -a %d\n",sta->aid,authorized);
 	}
@@ -309,7 +389,10 @@
 	*pos++ = EAP_TYPE_IDENTITY;
 
 	DBGPRINT(RT_DEBUG_INFO, "IEEE802_1X_Request_Identity %d bytes & eap-leanth = %d\n",tlen,eap->length);
-	ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, buf, tlen);
+	if (rv_prod_type_g == PROD_TYPE_RV_345)
+		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, buf, tlen);
+	else
+		ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, buf, tlen);
 	free(buf);
 }
 
@@ -383,7 +466,10 @@
 	eap.length = htons(sizeof(eap));
 	DBGPRINT(RT_DEBUG_TRACE,"ieee802_1x_tx_canned_eap : Send to Sta with Identifier %d\n",id);
 
-	ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, (u8 *) &eap, sizeof(eap));
+	if (rv_prod_type_g == PROD_TYPE_RV_345)
+		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, (u8 *) &eap, sizeof(eap));
+	else
+		ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, (u8 *) &eap, sizeof(eap));
 }
 
 void ieee802_1x_tx_req(rtapd *rtapd, struct sta_info *sta, u8 id)
@@ -405,7 +491,10 @@
 		return;
 	}
 
-	ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,	sta->last_eap_radius, sta->last_eap_radius_len);
+	if (rv_prod_type_g == PROD_TYPE_RV_345)
+		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,	sta->last_eap_radius, sta->last_eap_radius_len);
+	else
+		ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,	sta->last_eap_radius, sta->last_eap_radius_len);
 }
 
 static void ieee802_1x_tx_key_one(rtapd *hapd, struct sta_info *sta,
@@ -481,7 +570,10 @@
 	hdr->length = htons(len);
 	hmac_md5(sta->eapol_key_sign, sta->eapol_key_sign_len, buf, sizeof(*hdr) + len, key->key_signature);
 
-	ieee802_1x_send(hapd, sta, IEEE802_1X_TYPE_EAPOL_KEY, (u8 *) key, len);
+	if (rv_prod_type_g == PROD_TYPE_RV_345)
+		ieee802_1x_send_with_cputag(hapd, sta, IEEE802_1X_TYPE_EAPOL_KEY, (u8 *) key, len);
+	else
+		ieee802_1x_send(hapd, sta, IEEE802_1X_TYPE_EAPOL_KEY, (u8 *) key, len);
 	free(buf);
 }
 
@@ -630,10 +722,10 @@
 	}
 
 	   // apd->conf->own_ip_addr is filled according to configuration file
-	if ((rtapd->conf->nasId_len[sta->ApIdx] > 0) &&
+	if ((rtapd->conf->nasId_len[ 0 /* sta->ApIdx */] > 0) &&
 	    !Radius_msg_add_attr(msg, RADIUS_ATTR_NAS_IDENTIFIER,
-				 rtapd->conf->nasId[sta->ApIdx],
-				 rtapd->conf->nasId_len[sta->ApIdx])) 
+				 rtapd->conf->nasId[0/*sta->ApIdx */],
+				 rtapd->conf->nasId_len[ 0 /* sta->ApIdx */])) 
 	{
 		DBGPRINT(RT_DEBUG_ERROR, "Could not add NAS-Identifier\n");
 		goto fail;
diff -ruaN a/src/source/rtdot1x.c b/src/source/rtdot1x.c
--- a/src/source/rtdot1x.c	2016-08-29 16:45:35.854505006 +0530
+++ b/src/source/rtdot1x.c	2016-08-29 16:45:47.718504891 +0530
@@ -29,8 +29,8 @@
 #include "radius_client.h"
 #include "config.h"
 
-char PID_RV34X[10] = {0};
 uint16_t total_ports_g;
+u8 rv_prod_type_g;
 
 //#define RT2860AP_SYSTEM_PATH   "/etc/Wireless/RT2860AP/RT2860AP.dat"
 #define NK_DEFAULT_CONFIG_FILENAME "/etc/rtapd.conf"
@@ -246,7 +246,7 @@
 
 	pBuf = &buf[0];
 	
-	if (strcmp(PID_RV34X,"RV340") == 0)
+	if (rv_prod_type_g  == PROD_TYPE_RV_340)
         {
                 eth_type_cpu = (unsigned short *)(pBuf + RTK8367_CPUTAG_START_OFFSET);
                 if(eth_type_cpu == NULL)
@@ -263,7 +263,7 @@
                         len -= RTK8367_CPUTAG_HDR_SIZE;
                 }
         }
-        else if (strcmp(PID_RV34X,"RV345") == 0)
+        else if (rv_prod_type_g  == PROD_TYPE_RV_345)
         {
                 eth_type_cpu = (unsigned short *)(pBuf + RV345_RTL8382_CPUTAG_START_OFFSET);
                 if(eth_type_cpu == NULL)
@@ -879,7 +879,7 @@
 		return;
 	}
 
-	for(portid = 1; portid <= total_ports_g; portid++)
+	for(portid = 0; portid < total_ports_g; portid++)
 	{
 		portControl = rv_get_portControl(portid);
 		if((portControl >= 0 ) && (portControl <= 2))
@@ -1018,10 +1018,9 @@
 	DBGPRINT(RT_DEBUG_TRACE, "--- enter %s ---\n", __func__);
 	
 	/** Fetch the Product ID **/
-        get_PID_RV34X(PID_RV34X);
-        printf("PID of board is %s \n",PID_RV34X);
+        get_PID_RV34X();
 
-        if (strcmp(PID_RV34X,"RV340") == 0) {
+        if (rv_prod_type_g  == PROD_TYPE_RV_340) {
                 num_lan = 4;
                 for (i = 0; i < num_lan; i++)
                 {
@@ -1036,18 +1035,18 @@
                         pclose(fp);
                 }
         }
-        else if (strcmp(PID_RV34X,"RV345") == 0)
+        else if (rv_prod_type_g  == PROD_TYPE_RV_345)
         {
                 num_lan = 16;
                 for (i = 0; i < num_lan; i++)
                 {
                         /* must init one time for receive EAPOL packets */
-                        sprintf(str, "rtkssdk_diag -D 1 -p %d -a 0",(i+1));
+                        sprintf(str, "rtkssdk_diag -D 1 -p %d -a 0",i);
                         if(NULL != (fp = popen(str,"r")))
-                                nk_Ap_add_sta(apd, NULL, i+1);
+                                nk_Ap_add_sta(apd, NULL, i);
                         pclose(fp);
-                        if (rv_get_portControl(i+1) == ForceAuthorized)
-                        sprintf(str, "rtkssdk_diag -D 1 -p %d -a 1",(i+1));
+                        if (rv_get_portControl(i) == ForceAuthorized)
+                        sprintf(str, "rtkssdk_diag -D 1 -p %d -a 1",i);
                         if(NULL != (fp = popen(str,"r")))
                         pclose(fp);
                 }
@@ -1061,7 +1060,7 @@
 }
 
 /** Function to get the Product ID **/
-int get_PID_RV34X(char* PID)
+int get_PID_RV34X()
 {
   FILE *fp=NULL;
   char cmd[256];
@@ -1077,16 +1076,16 @@
 
   if (strncmp(cmd,"RV340",5) == 0) 
   {
-  	strcpy(PID,"RV340");
 	total_ports_g = 4;
-	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports", PID, total_ports_g);
+	rv_prod_type_g = PROD_TYPE_RV_340;
+	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports", "RV340", total_ports_g);
         return 0;
   }
   else if (strncmp(cmd,"RV345",5) == 0) 
   {
-       	strcpy(PID,"RV345");
 	total_ports_g = 16;
-	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports",PID, total_ports_g);
+	rv_prod_type_g = PROD_TYPE_RV_345;
+	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports","RV345", total_ports_g);
        	return 0;
   }
   return -1;
diff -ruaN a/src/source/sta_info.c b/src/source/sta_info.c
--- a/src/source/sta_info.c	2016-08-29 16:46:49.286504297 +0530
+++ b/src/source/sta_info.c	2016-08-29 16:46:38.622504400 +0530
@@ -55,7 +55,7 @@
 		else
 			s->ApIdx = RV34xx_LAN_IFIDX; 
 
-		DBGPRINT(RT_DEBUG_TRACE,"Create a new STA(in %s%d)\n", apd->prefix_wlan_name, s->ApIdx);
+		DBGPRINT(RT_DEBUG_TRACE,"Create a new STA(in %s%d)\n", apd->prefix_wlan_name, *apidx);
 
 		s->SockNum = sock;
 		memcpy(s->addr, sa, ETH_ALEN);
@@ -69,7 +69,7 @@
 	}
 	else
 	{
-		DBGPRINT(RT_DEBUG_TRACE,"A STA has existed(in %s%d)\n", apd->prefix_wlan_name, s->ApIdx);
+		DBGPRINT(RT_DEBUG_TRACE,"A STA has existed(in %s%d)\n", apd->prefix_wlan_name, s->aid);
 	}	
 	
 	return s;
@@ -307,8 +307,8 @@
 	size_t len;
 	struct ieee8023_hdr *hdr3;
 	struct sta_info *sta = timeout_ctx;
-	
-#ifdef CONFIG_NK_802_1X
+
+#if defined (CONFIG_NK_802_1X) || defined (CONFIG_RV34X_8021X)
 	/* let state machine run reAuthenticate flow */
 	return;
 #endif
