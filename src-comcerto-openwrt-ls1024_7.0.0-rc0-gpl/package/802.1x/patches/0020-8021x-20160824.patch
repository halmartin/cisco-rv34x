diff -ruaN c/src/source/rtdot1x.c d/src/source/rtdot1x.c
--- c/src/source/rtdot1x.c	2016-08-24 19:44:34.390408031 +0530
+++ d/src/source/rtdot1x.c	2016-08-24 19:44:55.374408425 +0530
@@ -35,6 +35,7 @@
 //#define RT2860AP_SYSTEM_PATH   "/etc/Wireless/RT2860AP/RT2860AP.dat"
 #define NK_DEFAULT_CONFIG_FILENAME "/etc/rtapd.conf"
 #define NK_DEFAULT_PID_FILENAME "/var/run/rtapd.pid"
+#define NXP_LINK_MON_LOOPBACK_SOCK_FD  45678
 
 struct rtapd_config * nk_Config_read(char *config_filename, char *prefix_name);
 
@@ -179,7 +180,7 @@
 	Radius_client_flush(rtapd);
 	Config_free(rtapd->conf);
 	rtapd->conf = newconf;
-    Apd_free_stas(rtapd);
+	Apd_free_stas(rtapd);
 
 	/* when reStartAP, no need to reallocate sock
     for (i = 0; i < rtapd->conf->SsidNum; i++)
@@ -416,48 +417,95 @@
 	}
 }
 
+static void Handle_Link_Monitor_Events(int sock, void *eloop_ctx, void *sock_ctx)
+{                              
+	rtapd *rtapd = eloop_ctx;
+	int len;
+	unsigned int buf[2];
+        struct sta_info *sta;
+
+	memset(&buf, 0 , sizeof(buf));	
+	len = recv(sock, buf, sizeof(buf), 0);
+	if (len < 0)
+    	{
+		DBGPRINT(RT_DEBUG_ERROR,"Handle_Link_Monitor_Events: recv failed");
+		return;
+	}
+
+	DBGPRINT(RT_DEBUG_TRACE,"Handle_Link_Monitor_Events: port_id = %d, port_event = %d\n",buf[0], buf[1]);
+	if ((buf[0] >= total_ports_g) || (buf[1] > 1))
+	{
+		DBGPRINT(RT_DEBUG_ERROR,"Handle_Link_Monitor_Events: Invalid port_id = %d, port_event = %d\n",buf[0], buf[1]);
+		return;
+	}
+       	sta = rtapd->sta_list;
+	while (sta)
+	{
+		if((sta->ApIdx == buf[0]) && sta->eapol_sm && (sta->eapol_sm->portControl == 2) &&
+		   (sta->eapol_sm->portEnabled != buf[1]))
+		{
+			if (buf[1] == 0) /* DOWN */
+			{
+				sta->eapol_sm->portEnabled = FALSE;
+				eapol_sm_step(sta->eapol_sm);
+				DBGPRINT(RT_DEBUG_TRACE,"Handle_Link_Monitor_Events: PORT DISABLED\n");
+			}
+			else /* UP */
+			{
+				sta->eapol_sm->portEnabled = TRUE;
+				eapol_sm_step(sta->eapol_sm);
+				DBGPRINT(RT_DEBUG_TRACE,"Handle_Link_Monitor_Events: PORT ENABLED\n");
+			}
+		}
+		sta = sta->next;
+	}
+	return;
+}
+
 int Apd_init_sockets(rtapd *rtapd)
 {
-    	struct ifreq ifr;
+	struct ifreq ifr;
 	struct sockaddr_ll addr;
-    	int i;
+	int i;
+	int s = -1, optval = 1;
+	struct sockaddr_in lb_addr;
 	
 	// 1. init ethernet interface socket for pre-auth
 	for (i = 0; i < rtapd->conf->num_preauth_if; i++)
 	{
 		rtapd->eth_sock[i] = socket(PF_PACKET, SOCK_RAW, htons(RTKSWITCH_ETH_TYPE));
-	    if (rtapd->eth_sock[i] < 0)
-    	{
-    	    perror("socket[PF_PACKET,SOCK_RAW](eth_sock)");
+		if (rtapd->eth_sock[i] < 0)
+		{
+			perror("socket[PF_PACKET,SOCK_RAW](eth_sock)");
 			return -1;
-    	}
+		}
 
-	    if (eloop_register_read_sock(rtapd->eth_sock[i], Handle_read, rtapd, NULL))
-    	{
-    	    DBGPRINT(RT_DEBUG_ERROR,"Could not register read socket(eth_sock)\n");
+		if (eloop_register_read_sock(rtapd->eth_sock[i], Handle_read, rtapd, NULL))
+		{
+			DBGPRINT(RT_DEBUG_ERROR,"Could not register read socket(eth_sock)\n");
 			return -1;
-    	}
+		}
 	
-    	memset(&ifr, 0, sizeof(ifr));
-	    strcpy(ifr.ifr_name, rtapd->conf->preauth_if_name[i]);
-    	DBGPRINT(RT_DEBUG_TRACE,"Register pre-auth interface as (%s)\n", ifr.ifr_name);
+		memset(&ifr, 0, sizeof(ifr));
+		strcpy(ifr.ifr_name, rtapd->conf->preauth_if_name[i]);
+		DBGPRINT(RT_DEBUG_TRACE,"Register pre-auth interface as (%s)\n", ifr.ifr_name);
 
-	    if (ioctl(rtapd->eth_sock[i], SIOCGIFINDEX, &ifr) != 0)
-    	{
-    	    perror("ioctl(SIOCGIFHWADDR)(eth_sock)");
-   	     	return -1;
-    	}
+		if (ioctl(rtapd->eth_sock[i], SIOCGIFINDEX, &ifr) != 0)
+		{
+			perror("ioctl(SIOCGIFHWADDR)(eth_sock)");
+			return -1;
+		}
 
-    	memset(&addr, 0, sizeof(addr));
+		memset(&addr, 0, sizeof(addr));
 		addr.sll_family = AF_PACKET;
 		addr.sll_ifindex = ifr.ifr_ifindex;
 		if (bind(rtapd->eth_sock[i], (struct sockaddr *) &addr, sizeof(addr)) < 0)
-    	{
+		{
 			perror("bind");
 			return -1;
 		}
-	    DBGPRINT(RT_DEBUG_TRACE,"Pre-auth raw packet socket binding on %s(socknum=%d,ifindex=%d)\n", 
-									ifr.ifr_name, rtapd->eth_sock[i], addr.sll_ifindex);
+		DBGPRINT(RT_DEBUG_TRACE,"Pre-auth raw packet socket binding on %s(socknum=%d,ifindex=%d)\n", 
+							ifr.ifr_name, rtapd->eth_sock[i], addr.sll_ifindex);
 	}
 
 	// 2. init wireless interface socket for EAP negotiation
@@ -501,43 +549,69 @@
 	}
 #endif
 	// 3. Get wireless interface MAC address
-    for(i = 0; i < 1 /*rtapd->conf->SsidNum*/; i++)//NOT required for non-WLAN 802.1x
-    {
-		int s = -1;
-	
+	for(i = 0; i < 1 /*rtapd->conf->SsidNum*/; i++)//NOT required for non-WLAN 802.1x
+	{
 		s = socket(AF_INET, SOCK_DGRAM, 0); 
-
 		if (s < 0)
-        {
-            perror("socket[AF_INET,SOCK_DGRAM]");
-    		return -1;
-        }
+		{
+			perror("socket[AF_INET,SOCK_DGRAM]");
+			return -1;
+		}
     
-    	memset(&ifr, 0, sizeof(ifr));
-	strcpy(ifr.ifr_name, rtapd->conf->eap_if_name[i]);
+	 	memset(&ifr, 0, sizeof(ifr));
+		strcpy(ifr.ifr_name, rtapd->conf->eap_if_name[i]);
  
-	// Get MAC address
-    	if (ioctl(s, SIOCGIFHWADDR, &ifr) != 0)
-    	{
-	       	perror("ioctl(SIOCGIFHWADDR)");
-		close(s);
-        	return -1;
-    	}
+		// Get MAC address
+	    	if (ioctl(s, SIOCGIFHWADDR, &ifr) != 0)
+	    	{
+		       	perror("ioctl(SIOCGIFHWADDR)");
+			close(s);
+	        	return -1;
+    		}
 
-    	DBGPRINT(RT_DEBUG_INFO," Device %s has ifr.ifr_hwaddr.sa_family %d\n",ifr.ifr_name, ifr.ifr_hwaddr.sa_family);
-	if (ifr.ifr_hwaddr.sa_family != ARPHRD_ETHER)
-    	{
-		DBGPRINT(RT_DEBUG_ERROR,"IF-%s : Invalid HW-addr family 0x%04x\n", ifr.ifr_name, ifr.ifr_hwaddr.sa_family);
-		close(s);
-		return -1;
-	}
+	    	DBGPRINT(RT_DEBUG_INFO," Device %s has ifr.ifr_hwaddr.sa_family %d\n",ifr.ifr_name, ifr.ifr_hwaddr.sa_family);
+		if (ifr.ifr_hwaddr.sa_family != ARPHRD_ETHER)
+		{
+			DBGPRINT(RT_DEBUG_ERROR,"IF-%s : Invalid HW-addr family 0x%04x\n", ifr.ifr_name, ifr.ifr_hwaddr.sa_family);
+			close(s);
+			return -1;
+		}
 
 		memcpy(rtapd->own_addr[i], ifr.ifr_hwaddr.sa_data, ETH_ALEN);
-    	DBGPRINT(RT_DEBUG_TRACE, "IF-%s MAC Address = " MACSTR "\n", ifr.ifr_name, MAC2STR(rtapd->own_addr[i]));
+		DBGPRINT(RT_DEBUG_TRACE, "IF-%s MAC Address = " MACSTR "\n", ifr.ifr_name, MAC2STR(rtapd->own_addr[i]));
 
 		close(s);
 	}
+	/* Register for Link Status Events */
+	s = -1;
+	s = socket(AF_INET, SOCK_DGRAM, 17); 
+	if(s < 0)
+        {
+		perror("socket[AF_INET,SOCK_DGRAM] for Link Monitor Failed");
+    		return -1;
+	}
 
+	if (setsockopt(s,  SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) != 0) {
+		perror("setsockopt failed for Link Monitor");
+	}
+
+	memset(&lb_addr, 0, sizeof(lb_addr));
+	lb_addr.sin_family = AF_INET;
+	lb_addr.sin_port   = htons(NXP_LINK_MON_LOOPBACK_SOCK_FD);
+	lb_addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+
+	if(bind(s, (struct sockaddr_in *)&lb_addr, sizeof(struct sockaddr_in)) < 0)
+	{
+		perror("socket bind failed for Link Monitor");
+		close(s);
+    		return -1;
+	}
+	if (eloop_register_read_sock(s, Handle_Link_Monitor_Events, rtapd, NULL))
+	{
+       		DBGPRINT(RT_DEBUG_ERROR,"Could not register socket for Link Monitor\n");
+		return -1;
+	}
+	DBGPRINT(RT_DEBUG_TRACE,"Link Monitor Registration Success\n");
 	return 0;
 }
 
@@ -779,6 +853,7 @@
 		{
 			if(sta->eapol_sm && (sta->eapol_sm->portControl == 2))
 			{
+				sta->eapol_sm->auth_pae.reAuthCount = 0;
 				sta->eapol_sm->reAuthenticate = TRUE;
 				eapol_sm_step(sta->eapol_sm);
 				DBGPRINT(RT_DEBUG_TRACE,"Removing station " MACSTR "\n", MAC2STR(sta->addr));
