diff -ruaN a/src/header/config.h b/src/header/config.h
--- a/src/header/config.h	2017-05-03 11:06:56.626860078 +0530
+++ b/src/header/config.h	2017-05-03 11:59:08.882918882 +0530
@@ -4,9 +4,13 @@
 //#include <nkutil.h>
 #define DBG 1
 /*Porting changes here */
-#define LAN_IFACE_NAME "eth3"
+
+//made global variable
+//#define RV34xx_LAN_IFIDX 3
+//#define LAN_IFACE_NAME "eth3"
+
+
 #define MAX_LINE_SIZE 80
-#define RV34xx_LAN_IFIDX 3
 
 typedef u8 macaddr[ETH_ALEN];
 
diff -ruaN a/src/header/rtdot1x.h b/src/header/rtdot1x.h
--- a/src/header/rtdot1x.h	2017-05-03 11:06:56.626860078 +0530
+++ b/src/header/rtdot1x.h	2017-05-04 11:56:36.188538054 +0530
@@ -111,9 +111,32 @@
 #endif
 /** RV345 **/
 
+
+//Broadcom changes 
+#ifndef BCMSWITCH_ETH_TYPE
+#define BCMSWITCH_ETH_TYPE 0x888e
+#endif
+
+#ifndef BCM_RV16X_RV26X_CPUTAG_OFFSET
+#define BCM_RV16X_RV26X_CPUTAG_OFFSET 15
+#endif
+
+#ifndef BCM_RV16X_RV26X_CPUTAG_HDR_SIZE
+#define BCM_RV16X_RV26X_CPUTAG_HDR_SIZE 4
+#endif
+
+#ifndef BCM_RV16X_RV26X_CPUTAG_START_OFFSET
+#define BCM_RV16X_RV26X_CPUTAG_START_OFFSET 12
+#endif
+
+
+
+
 enum {
  PROD_TYPE_RV_340,
  PROD_TYPE_RV_345,
+ PROD_TYPE_RV_160,
+ PROD_TYPE_RV_260,
 };
 
 
@@ -158,6 +181,14 @@
 	u16 eth_type;
 } __attribute__ ((packed));
 
+struct ieee8023_hdr_with_bcm_cputag {
+	u8 dAddr[6];
+	u8 sAddr[6];
+	u8 tx_cpu_tag[4];
+	u16 eth_type;
+} __attribute__ ((packed));
+
+
 typedef struct apd_data {
 	struct rtapd_config *conf;
 	char *prefix_wlan_name;		/* the prefix name of wireless interface */
diff -ruaN a/src/source/config.c b/src/source/config.c
--- a/src/source/config.c	2017-05-03 11:07:05.338860242 +0530
+++ b/src/source/config.c	2017-05-03 11:57:36.378917145 +0530
@@ -17,6 +17,10 @@
 #include "ieee802_1x.h"
 #include "md5.h"
 
+extern char LAN_IFACE_NAME[10];
+
+
+
 unsigned char BtoH(
     unsigned char ch)
 {
diff -ruaN a/src/source/eapol_sm.c b/src/source/eapol_sm.c
--- a/src/source/eapol_sm.c	2017-05-03 11:07:05.338860242 +0530
+++ b/src/source/eapol_sm.c	2017-05-04 11:40:44.192520182 +0530
@@ -619,6 +619,15 @@
                 memset(str, 0 , MAX_COMMAND_STR);
                 sprintf(str, "cat /tmp/stats/tmp_stats_port%d", aid);
         }
+	else if (rv_prod_type_g == PROD_TYPE_RV_260 || rv_prod_type_g == PROD_TYPE_RV_160)
+        {
+                 sprintf(str, "/usr/sbin/bcmssdk -S 1 -p %d -g 1", aid);
+                if(NULL != (fp = popen(str,"r")))
+                pclose(fp);
+
+                memset(str, 0 , MAX_COMMAND_STR);
+                sprintf(str, "cat /tmp/stats/tmp_stats_port%d", aid);
+        }
 
 	if((fp = popen(str,"r")) !=NULL)
 	{
diff -ruaN a/src/source/ieee802_1x.c b/src/source/ieee802_1x.c
--- a/src/source/ieee802_1x.c	2017-05-03 11:07:05.338860242 +0530
+++ b/src/source/ieee802_1x.c	2017-05-04 12:23:41.712568571 +0530
@@ -77,6 +77,33 @@
 		 default:  return -1;
         	}
 	}
+	else if (rv_prod_type_g  == PROD_TYPE_RV_160)
+        {
+                switch(nas_port)
+                {
+                         case 0 :  return 4;
+                         case 1 : return 3;
+                         case 2 : return 2;
+                         case 3 : return 1;
+                         default:  return -1;
+                }
+
+        }
+        else if (rv_prod_type_g  == PROD_TYPE_RV_260)
+        {
+                switch(nas_port)
+                {
+                 case 0 :  return 1;
+                 case 1 :  return 2;
+                 case 2 : return 3;
+                 case 3 : return 4;
+                 case 4 : return 5;
+                 case 5 :  return 6;
+                 case 6 : return 7;
+                 case 7 : return 8;
+                 default:  return -1;
+                }
+        }
 	else
 	{
 		DBGPRINT(RT_DEBUG_ERROR,"Invalid PID");
@@ -194,6 +221,71 @@
 	return;
 }
 
+static void ieee802_1x_insertBCM_CPUTag(u8 *pkt, u8 port_id)
+{
+        pkt[0] = 0x20;
+        pkt[1] = 0x0;
+        pkt[2] = 0x0;
+        pkt[3] = 0x1 << port_id;
+        return;
+}
+
+static void ieee802_1x_send_with_bcm_cputag(rtapd *rtapd, struct sta_info *sta, u8 type, u8 *data, size_t datalen)
+{
+	char *buf;
+	struct ieee8023_hdr_with_bcm_cputag *hdr3;
+	struct ieee802_1x_hdr *xhdr;
+	size_t len;
+	u8 *pos;
+   
+	len = sizeof(*hdr3) + 2+ sizeof(*xhdr) +datalen;
+	buf = (char *) malloc(len);
+	if (buf == NULL)
+	{
+		DBGPRINT(RT_DEBUG_ERROR,"malloc() failed for ieee802_1x_send_with_bcm_cputag(len=%d)\n", len);
+		return;
+	}
+	DBGPRINT(RT_DEBUG_TRACE,"Send to Sta(%s%d) with Identifier %d\n", rtapd->prefix_wlan_name, sta->aid,*(data+1));
+	memset(buf, 0, len);
+	hdr3 = (struct ieee8023_hdr_with_bcm_cputag *) buf;
+	memcpy(hdr3->dAddr, sta->addr, ETH_ALEN);
+	memcpy(hdr3->sAddr, rtapd->own_addr[0], ETH_ALEN);
+
+	ieee802_1x_insertBCM_CPUTag(hdr3->tx_cpu_tag, sta->aid);
+
+//	memcpy(hdr3->sAddr, rtapd->own_addr[sta->ApIdx], ETH_ALEN);
+	if (sta->ethertype == ETH_P_PRE_AUTH)
+		(hdr3->eth_type) = htons(ETH_P_PRE_AUTH);
+	else
+		(hdr3->eth_type) = htons(ETH_P_PAE);
+
+	pos = (u8 *) (hdr3 + 1);
+	xhdr = (struct ieee802_1x_hdr *) pos;
+	if (sta->ethertype == ETH_P_PRE_AUTH)
+		xhdr->version = EAPOL_VERSION_2;
+	else
+		xhdr->version = EAPOL_VERSION;
+	xhdr->type = type;
+	xhdr->length = htons(datalen);
+
+	if (datalen > 0 && data != NULL)
+		memcpy(pos + LENGTH_8021X_HDR, data, datalen);
+	if (sta->ethertype == ETH_P_PRE_AUTH)
+	{
+		if (send(sta->SockNum/*rtapd->eth_sock*/, buf, len, 0) < 0)
+			perror("send[WPA2 pre-auth]");
+		DBGPRINT(RT_DEBUG_INFO,"ieee802_1x_send_cputag::WPA2, pre-auth, len=%d Ether-Type %x\n", len,sta->ethertype);
+	}
+	else
+	{
+		if (send(sta->SockNum/*rtapd->eth_sock*/, buf, len, 0) < 0)
+			perror("send[WPA2 eap]");
+		DBGPRINT(RT_DEBUG_INFO,"ieee802_1x_send_with_bcm_cputag::WPA2, eap, len=%d Ether-Type %x\n", len,hdr3->eth_type);
+	}
+
+	free(buf);
+	return;
+}
 static void ieee802_1x_send_with_cputag(rtapd *rtapd, struct sta_info *sta, u8 type, u8 *data, size_t datalen)
 {
 	char *buf;
@@ -331,6 +423,11 @@
 	{
         	sprintf(str, "rtkssdk_diag -D -p %d -a %d\n",sta->aid,authorized);
 	}
+	else if (rv_prod_type_g  == PROD_TYPE_RV_160 || rv_prod_type_g  == PROD_TYPE_RV_260)
+        {
+                sprintf(str, "/usr/sbin/bcmssdk -D -p %d -a %d\n",sta->aid,authorized);
+        }
+
 	else
 	{
 		DBGPRINT(RT_DEBUG_ERROR,"Invalid PID");
@@ -409,6 +506,8 @@
 	DBGPRINT(RT_DEBUG_INFO, "IEEE802_1X_Request_Identity %d bytes & eap-leanth = %d\n",tlen,eap->length);
 	if (rv_prod_type_g == PROD_TYPE_RV_345)
 		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, buf, tlen);
+	else if (rv_prod_type_g == PROD_TYPE_RV_160 || rv_prod_type_g == PROD_TYPE_RV_260)
+		ieee802_1x_send_with_bcm_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, buf, tlen);
 	else
 		ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, buf, tlen);
 	free(buf);
@@ -486,6 +585,8 @@
 
 	if (rv_prod_type_g == PROD_TYPE_RV_345)
 		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, (u8 *) &eap, sizeof(eap));
+	else if (rv_prod_type_g == PROD_TYPE_RV_160 || rv_prod_type_g == PROD_TYPE_RV_260)
+		ieee802_1x_send_with_bcm_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, (u8 *) &eap, sizeof(eap));
 	else
 		ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET, (u8 *) &eap, sizeof(eap));
 }
@@ -510,7 +611,9 @@
 	}
 
 	if (rv_prod_type_g == PROD_TYPE_RV_345)
-		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,	sta->last_eap_radius, sta->last_eap_radius_len);
+		ieee802_1x_send_with_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,sta->last_eap_radius, sta->last_eap_radius_len);
+	else if (rv_prod_type_g == PROD_TYPE_RV_160 || rv_prod_type_g == PROD_TYPE_RV_260)
+	    ieee802_1x_send_with_bcm_cputag(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,sta->last_eap_radius, sta->last_eap_radius_len);
 	else
 		ieee802_1x_send(rtapd, sta, IEEE802_1X_TYPE_EAP_PACKET,	sta->last_eap_radius, sta->last_eap_radius_len);
 }
@@ -590,6 +693,8 @@
 
 	if (rv_prod_type_g == PROD_TYPE_RV_345)
 		ieee802_1x_send_with_cputag(hapd, sta, IEEE802_1X_TYPE_EAPOL_KEY, (u8 *) key, len);
+	else if (rv_prod_type_g == PROD_TYPE_RV_160 || rv_prod_type_g == PROD_TYPE_RV_260)
+		ieee802_1x_send_with_bcm_cputag(hapd, sta, IEEE802_1X_TYPE_EAPOL_KEY, (u8 *) key, len);
 	else
 		ieee802_1x_send(hapd, sta, IEEE802_1X_TYPE_EAPOL_KEY, (u8 *) key, len);
 	free(buf);
@@ -1251,7 +1356,7 @@
   int rsock;
   int action;
   
-       confd_init_vsn(NULL,NULL,4,0x06000000);
+       confd_init_vsn(NULL,NULL,4,0x06020000);
        addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        addr.sin_family = AF_INET;
        addr.sin_port = htons(4565);
diff -ruaN a/src/source/rtdot1x.c b/src/source/rtdot1x.c
--- a/src/source/rtdot1x.c	2017-05-03 11:07:05.338860242 +0530
+++ b/src/source/rtdot1x.c	2017-05-04 14:19:18.780698805 +0530
@@ -31,6 +31,8 @@
 
 uint16_t total_ports_g;
 u8 rv_prod_type_g;
+uint8_t lan_ifidx_g;
+char LAN_IFACE_NAME[10];
 
 //#define RT2860AP_SYSTEM_PATH   "/etc/Wireless/RT2860AP/RT2860AP.dat"
 #define NK_DEFAULT_CONFIG_FILENAME "/etc/rtapd.conf"
@@ -238,7 +240,7 @@
 	
 	len = recv(sock, buf, sizeof(buf), 0);
 	if (len < 0)
-    {
+    	{
 		perror("recv");
         Handle_term(15,eloop_ctx,sock_ctx);
         return;
@@ -280,10 +282,26 @@
                         len -= RV345_RTL8382_CPUTAG_HDR_SIZE;
                 }
         }
+        else if (rv_prod_type_g  == PROD_TYPE_RV_160 || rv_prod_type_g  == PROD_TYPE_RV_260)
+        {
+                eth_type_cpu = (unsigned short *)(pBuf + BCM_RV16X_RV26X_CPUTAG_START_OFFSET);
+                if(eth_type_cpu == NULL)
+                {
+                        return;
+                }
+                if(*eth_type_cpu == ntohs(BCMSWITCH_ETH_TYPE))
+                {
+                        /* Retrieve port number first */
+                        apidx = portnum = (*((pBuf + BCM_RV16X_RV26X_CPUTAG_OFFSET)) & 0x000F);
+                        DBGPRINT(RT_DEBUG_TRACE, "\r\n[BCM Switch] Packet received on switch --- port = %d ---", apidx);
+                        memmove(pBuf + BCM_RV16X_RV26X_CPUTAG_HDR_SIZE, pBuf,BCM_RV16X_RV26X_CPUTAG_START_OFFSET);
+                        pBuf = pBuf + BCM_RV16X_RV26X_CPUTAG_HDR_SIZE;
+                        len -= BCM_RV16X_RV26X_CPUTAG_HDR_SIZE;
+                }
+        }
 	else
 	{
         	DBGPRINT(RT_DEBUG_ERROR, "Invalid PID");
-
 	}
 
 	rec = (priv_rec*)pBuf;
@@ -487,11 +505,29 @@
 	int i;
 	int s = -1, optval = 1;
 	struct sockaddr_in lb_addr;
-	
+
+	/** Fetch the Product ID **/
+        get_ProductID();
+        DBGPRINT(RT_DEBUG_TRACE,"Product ID = %d\n", rv_prod_type_g);
+
 	// 1. init ethernet interface socket for pre-auth
 	for (i = 0; i < rtapd->conf->num_preauth_if; i++)
 	{
-		rtapd->eth_sock[i] = socket(PF_PACKET, SOCK_RAW, htons(RTKSWITCH_ETH_TYPE));
+	
+		if (rv_prod_type_g  == PROD_TYPE_RV_340 || rv_prod_type_g  == PROD_TYPE_RV_345)
+        	{
+			rtapd->eth_sock[i] = socket(PF_PACKET, SOCK_RAW, htons(RTKSWITCH_ETH_TYPE));
+       		}
+        	else if (rv_prod_type_g  == PROD_TYPE_RV_160 || rv_prod_type_g  == PROD_TYPE_RV_260)
+        	{
+			rtapd->eth_sock[i] = socket(PF_PACKET, SOCK_RAW, htons(BCMSWITCH_ETH_TYPE));
+		}
+		else
+		{
+	                DBGPRINT(RT_DEBUG_ERROR,"PID is wrong check it\n");
+			return -1;
+		}
+
 		if (rtapd->eth_sock[i] < 0)
 		{
 			perror("socket[PF_PACKET,SOCK_RAW](eth_sock)");
@@ -1053,10 +1089,7 @@
 	if (!apd)
 		return;
 
-	DBGPRINT(RT_DEBUG_TRACE, "--- enter %s ---\n", __func__);
-	
-	/** Fetch the Product ID **/
-        get_PID_RV34X();
+	DBGPRINT(RT_DEBUG_TRACE, "%s : Initialization of 802.1x\n", __func__);
 
         if (rv_prod_type_g  == PROD_TYPE_RV_340) {
                 num_lan = 4;
@@ -1089,6 +1122,38 @@
                         pclose(fp);
                 }
         }
+	else if (rv_prod_type_g  == PROD_TYPE_RV_160) 
+	{
+                num_lan = 4;
+                for (i = 0; i < num_lan; i++)
+                {
+                        /* TPDO must init one time for receive EAPOL packets */
+                        sprintf(str, "/usr/sbin/bcmssdk -D 1 -p %d -a 0",i);
+                        if(NULL != (fp = popen(str,"r")))
+                                nk_Ap_add_sta(apd, NULL, i);
+                        pclose(fp);
+                        if (rv_get_portControl(i) == ForceAuthorized)
+                        sprintf(str, "/usr/sbin/bcmssdk -D 1 -p %d -a 1",i);
+                        if(NULL != (fp = popen(str,"r")))
+                        pclose(fp);
+                }
+        }
+        else if (rv_prod_type_g  == PROD_TYPE_RV_260)
+        {
+                num_lan = 8;
+                for (i = 0; i < num_lan; i++)
+                {
+                        /* must init one time for receive EAPOL packets */
+                        sprintf(str, "/usr/sbin/bcmssdk -D 1 -p %d -a 0",i);
+                        if(NULL != (fp = popen(str,"r")))
+                                nk_Ap_add_sta(apd, NULL, i);
+                        pclose(fp);
+                        if (rv_get_portControl(i) == ForceAuthorized)
+                        sprintf(str, "/usr/sbin/bcmssdk -D 1 -p %d -a 1",i);
+                        if(NULL != (fp = popen(str,"r")))
+                        pclose(fp);
+                }
+        }
 	else
 	{
 		DBGPRINT(RT_DEBUG_ERROR, " Invalid PID ");
@@ -1098,7 +1163,7 @@
 }
 
 /** Function to get the Product ID **/
-int get_PID_RV34X()
+int get_ProductID()
 {
   FILE *fp=NULL;
   char cmd[256];
@@ -1116,6 +1181,8 @@
   {
 	total_ports_g = 4;
 	rv_prod_type_g = PROD_TYPE_RV_340;
+	lan_ifidx_g = 3;
+	strcpy(LAN_IFACE_NAME,"eth3");
 	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports", "RV340", total_ports_g);
         return 0;
   }
@@ -1123,9 +1190,29 @@
   {
 	total_ports_g = 16;
 	rv_prod_type_g = PROD_TYPE_RV_345;
+	lan_ifidx_g = 3;
+	strcpy(LAN_IFACE_NAME,"eth3");
 	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports","RV345", total_ports_g);
        	return 0;
   }
+  else if (strncmp(cmd,"RV160",5) == 0) 
+  {
+	total_ports_g = 4;
+	rv_prod_type_g = PROD_TYPE_RV_160;
+	lan_ifidx_g = 2;
+	strcpy(LAN_IFACE_NAME,"eth2");
+	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports","RV160", total_ports_g);
+       	return 0;
+  }
+  else if (strncmp(cmd,"RV260",5) == 0) 
+  {
+	total_ports_g = 8;
+	rv_prod_type_g = PROD_TYPE_RV_260;
+	lan_ifidx_g = 2;
+	strcpy(LAN_IFACE_NAME,"eth2");
+	DBGPRINT(RT_DEBUG_TRACE, "Board = %s with %d ports","RV260", total_ports_g);
+       	return 0;
+  }
   return -1;
 }
 
diff -ruaN a/src/source/sta_info.c b/src/source/sta_info.c
--- a/src/source/sta_info.c	2017-05-03 11:07:05.338860242 +0530
+++ b/src/source/sta_info.c	2017-05-03 11:53:35.750912628 +0530
@@ -16,6 +16,10 @@
 #include "ieee802_1x.h"
 #include "radius.h"
 #include "eapol_sm.h"
+
+extern uint8_t lan_ifidx_g;
+
+
 struct sta_info* nk_Ap_get_sta(rtapd *apd, u8 *sa);
 
 struct sta_info* Ap_get_sta(rtapd *apd, u8 *sa, u8 *apidx, u16 ethertype, int sock)
@@ -53,7 +57,7 @@
 		if (apd->conf->SsidNum > 1)
 			s->ApIdx = *apidx;
 		else
-			s->ApIdx = RV34xx_LAN_IFIDX; 
+			s->ApIdx = lan_ifidx_g; 
 
 		DBGPRINT(RT_DEBUG_TRACE,"Create a new STA(in %s%d)\n", apd->prefix_wlan_name, *apidx);
 
