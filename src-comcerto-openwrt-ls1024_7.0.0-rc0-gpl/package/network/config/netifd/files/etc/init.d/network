#!/bin/sh /etc/rc.common
# 2017-06-13: li.zhang <li.zhang@deltaww.com>
# fix bug of card status is not prorerly shown when insert dongle with booting 
# 2017-03-13: li.zhang <li.zhang@deltaww.com>
# Add parse the $Protocol single quotes and the 3G/4G related update 

START=20
STOP=90

. /lib/functions/network.sh
. /lib/netifd/netifd-proto.sh
. /lib/config/uci.sh

USE_PROCD=1

init_switch() {
	setup_switch() { return 0; }

	include /lib/network
	setup_switch
}

init_wireless() {
	board=$__this_device

        if [ "$board" = "RV160W" -o "$board" = "RV260W" -o "$board" = "RV340W" ];then

		# Block internet & other client access. Allow only GUI access for configuration SSID
		[ -e /mnt/initial_setup_done ] && {
			count=$(cat /mnt/configcert/b_count)
			if [ $count == 1 ]; then
				sh /usr/bin/initial_ssid_flush_rules.sh
				sh /usr/bin/initial_ssid_add_rules.sh
			fi
		}
		[ ! -e /mnt/initial_setup_done ] && {
			count=$(cat /mnt/configcert/b_count)
			[ ! -e /mnt/configcert/b_count -o "$count" != "2" ] && {
				sh /usr/bin/initial_ssid_add_rules.sh
				touch /mnt/initial_setup_done
				touch /mnt/configcert/b_count
				echo 1 > /mnt/configcert/b_count
			}
		}
		# Check Wi-Fi switch
		/usr/bin/wifi_bttn_init.sh

		wifi_button="$(/usr/bin/wifi_bttn_check.sh)"
		if [ ! -e /tmp/wireless_boot ];then
			logger -t network "loading wifi modules"

			[ ! -e /mnt/configcert/this_board_first_boot -a "$board" = "RV160W" ] && {
				cp /etc/config/wireless_rv160w /etc/config/wireless
				[ -e /tmp/etc/config/wireless ] && cp /etc/config/wireless_rv160w /tmp/etc/config/wireless

				touch /mnt/configcert/this_board_first_boot
			}

			[ -e /mnt/configcert/nvram/wificonfig ] && {
				cp /mnt/configcert/nvram/wificonfig /tmp/etc/config/wificonfig

				# Clear WPS device pin
				nvram set wps_device_pin_g
				nvram set wps_device_pin
				nvram set wps_ssid_update
				nvram set wps_wait_monitor
				nvram set wps_monitor_force
			}

			# set device info for WPS
			nvram set wps_device_name="$board"
			nvram set wps_mfstring="CISCO"
			serial_number=`uci get systeminfo.sysinfo.serial_number`
			nvram set boardnum="$serial_number"
			vid=`uci get systeminfo.sysinfo.vid`
			nvram set wps_modelnum="$vid"
			pid=`uci get systeminfo.sysinfo.pid`
			nvram set wps_modelname="$pid"
			nvram set wps_version2="enabled"
            if [ "$board" = "RV160W" -o "$board" = "RV260W" ];then
                nvram set wps_config_method="0x238C"
            else
                nvram set wps_config_method="0x2288"
            fi
			lan_hwaddr="$(uci get systeminfo.sysinfo.maclan)"
			nvram set lan_hwaddr="$lan_hwaddr"

			nvram commit

			if [ "$wifi_button" = "0" ];then
				echo "[Wireless] Switch is OFF" > /dev/console
			else
				start-stop-daemon -S -m -p /var/run/wps_daemon.pid -b -x wps_daemon
				/sbin/wifi reload
				touch /var/lock/wifi_button
				echo "[Wireless] Start success" > /dev/console
			fi
		else
			if [ "$wifi_button" != "0" ];then
				/sbin/wifi_update
			fi
		fi
	fi
}

start_service() {
	init_switch

	procd_open_instance
	procd_set_param command /sbin/netifd
	procd_set_param respawn
	procd_set_param watch network.interface
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_set_param limits core="unlimited"
		echo '/tmp/%e.%p.%s.%t.core' > /proc/sys/kernel/core_pattern
	}
	procd_close_instance

	local rtupd_pid=`pgrep rtupd`
	[ "$rtupd_pid" == "" ] && {
		logger -t network "bringing up rtupd"
		if [ "$__this_device" = "RV160" ] || [ "$__this_device" = "RV160W" ]; then
			rtupd 1 &
		else
			rtupd &
		fi
	}
	
	ip rule add pref 2254 fwmark 0xfe00/0xff00 unreachable
	uci_set_state mwan3 full_tunnel "" tunnel_state
	uci_toggle_state mwan3 full_tunnel tunnel_name ""
}

adjust_network_config() {
	uci commit network
	diff=$(cat /tmp/networkconfig | grep -Ew "dhcp|pppoe|l2tp|pptp|gateway|3g|qmi|mobile") 
	
	for line in $diff
	do
	#{
		case $line in
			network.*.gateway*)
			#{
				ifname=$(echo $line | cut -f 2 -d '.')
				case $ifname in
					vlan*|wan*|gre*)
						proto_get_metric metric
						uci set network.$ifname.metric=$metric
						uci commit network
					;;
				esac
			#}
			;;

			network.*.proto=*)
			#{
				ifname=$(echo $line | cut -f 2 -d '.')
				Protocol=$(echo $line | cut -f 2 -d '=' | sed s/\'//g)
				case $ifname in
					wan?6*)
					;;

					vlan*|wan*|usb1|usb2)
						board=$__this_device
						if [ "$board" = "RV160" ] || [ "$board" = "RV160W" ]; then
							if [ "$Protocol" != "pptp" ] && [ "$Protocol" != "l2tp" ]; then
								proto_get_metric metric
								uci set network.$ifname.metric=$metric
								uci commit network
							fi
						else
							if [ "$Protocol" = "pptp" ] || [ "$Protocol" == "l2tp" ]; then
								nonLogicalIface=`echo $ifname | sed s/p//g`
								metric=`uci get network.$nonLogicalIface.metric`
								metric=`expr $metric - 1`
							else
							proto_get_metric metric
							fi
							uci set network.$ifname.metric=$metric
							uci commit network
						fi
					;;
				esac
		
				if [ "$Protocol" = "3g" ] || [ "$Protocol" = "qmi" ] || [ "$Protocol" = "mobile" ];then
					pin_error=`ifstatus $ifname | grep "PIN_FAILED"`

					if [ -f "/var/USBCONNSTATUS" ];then	
						detect=$(cat /var/USBCONNSTATUS | grep -i $ifname | awk -F: '{printf $4}')
						if [ "$detect" = "3G" ] || [ "$detect" = "4G" ];then
							exist=`ps -w | grep connect_detect | grep -v grep |wc -l`
							if [ "$exist" = "0" ];then
								/usr/bin/connect_detect.sh &
							fi
						fi
					fi

					# Add default options
					usb_port=${ifname#*usb}
					device=`uci get network.usb${usb_port}.device` >/dev/null 2>&1
					[ -z $device ] && `uci set network.usb${usb_port}.device=/dev/modem${usb_port}`
			
					enable=`uci get network.usb${usb_port}.enable` >/dev/null 2>&1
					[ -z $enable ] && `uci set network.usb${usb_port}.enable=1`
				
					if [ "$Protocol" = "3g" ];then
						# Service
						demand=`uci get network.usb${usb_port}.demand` >/dev/null 2>&1
						keepalive=`uci get network.usb${usb_port}.keepalive` >/dev/null 2>&1
						[ -n "$keepalive" ] && `uci set network.usb${usb_port}.keepalive=$keepalive`
						[ -z "$keepalive" ] && {
							[ -z "$demand" ] && demand=5
							`uci set network.usb${usb_port}.demand=$demand`
						}
					fi

					if [ "$Protocol" = "qmi" ];then
						nas_cid=`uci get /tmp/etc/config/network.usb${usb_port}.nas_cid` >/dev/null 2>&1
						[ -n "$nas_cid" ] && {
							`uci set network.usb${usb_port}.nas_cid=$nas_cid` >/dev/null 2>&1
						}
					fi
			
					uci commit network
			
					# Spawn a script to check usb status and perform ifup is it is down.
					[ -n "$pin_error" ] && /usr/bin/ifupUsbDevice $ifname
				fi
			#}
			;;
		esac
	#}
	done 

	ppp_ifaces=$(uci show network | grep "network.*.proto" | grep -E "wan2p|wan1p" | grep -v "pppoe" | awk -F . '{print $2}')
	for p in $ppp_ifaces
	do
		other_int=$(echo $p | sed s/p//)
		ppp_int=$(cat /tmp/networkconfig | grep ".$other_int.")
		[ -n "$ppp_int" ] && {
			ppp_found=$(cat /tmp/networkconfig | grep ".$p.")
			if [ "$ppp_found" = "" ]; then
				uci reorder network.$p=2000 2>&- >&-
				uci commit network
			fi	
		}
	done
}

reload_service() {

	adjust_network_config

	init_switch
	ubus call network reload
	init_wireless

	line=$(cat /tmp/networkconfig | grep -Ewm1 "ip6class")
	[ -z "$line" ] || {
		#logger -t network "@ip6class reloading ....."
		# ip6class is dynamic but proto is defined as static for vlan interface
		# so refresh interface to assign pd prefix.
		uci set $line
		uci commit network
		ubus call network reload
	}

}

stop() {
	/sbin/wifi down
	procd_kill network ''
}

service_running() {
	ubus -t 30 wait_for network.interface

	#init_wireless
}

validate_atm_bridge_section()
{
	uci_validate_section network "atm-bridge" "${1}" \
		'unit:uinteger:0' \
		'vci:range(32, 65535):35' \
		'vpi:range(0, 255):8' \
		'atmdev:uinteger:0' \
		'encaps:or("llc", "vc"):llc' \
		'payload:or("bridged", "routed"):bridged'
}

validate_route_section()
{
	uci_validate_section network route "${1}" \
		'interface:string' \
		'target:cidr4' \
		'netmask:netmask4' \
		'gateway:ip4addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_route6_section()
{
	uci_validate_section network route6 "${1}" \
		'interface:string' \
		'target:cidr6' \
		'gateway:ip6addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_rule_section()
{
	uci_validate_section network rule "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr4' \
		'dest:cidr4' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_rule6_section()
{
	uci_validate_section network rule6 "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr6' \
		'dest:cidr6' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_switch_section()
{
	uci_validate_section network switch "${1}" \
		'name:string' \
		'enable:bool' \
		'enable_vlan:bool' \
		'reset:bool'
}

validate_switch_vlan()
{
	uci_validate_section network switch_vlan "${1}" \
		'device:string' \
		'vlan:uinteger' \
		'ports:list(ports)'
}

service_triggers()
{
	procd_add_reload_trigger network wireless

	procd_open_validate
	validate_atm_bridge_section
	validate_route_section
	validate_route6_section
	validate_rule_section
	validate_rule6_section
	validate_switch_section
	validate_switch_vlan
	procd_close_validate
}

restart() {
	ifdown -a
	sleep 1
	trap '' TERM
	stop "$@"
	start "$@"
}

shutdown() {
	ifdown -a
	sleep 1
}
