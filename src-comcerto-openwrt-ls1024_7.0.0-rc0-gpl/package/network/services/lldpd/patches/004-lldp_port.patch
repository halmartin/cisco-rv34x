--- a/src/lldp.c	2015-11-10 14:32:26.904293692 +0530
+++ b/src/lldp.c	2015-11-10 14:36:23.588293663 +0530
@@ -26,6 +26,15 @@
 #include <sys/ioctl.h>
 #include <netpacket/packet.h>
 #include <linux/sockios.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+#define LAN_INTERFACE "eth3"
+#define PORTOFFSET 19
+#define CPUTAGLEN 8
+#define CPUTAGPROTOCOL 0x8899
 
 inline static int
 lldpd_af_to_lldp_proto(int af)
@@ -63,8 +72,12 @@ lldp_send(struct lldpd *global,
 	int length;
 	u_int8_t *packet, *pos, *tlv;
 	struct lldpd_mgmt *mgmt;
-	int proto;
-
+    u_int8_t cputag[9]={'\0'};
+    u_int8_t j=1;
+    int proto;
+    char cmd[64]={'\0'};
+    char var[2]={'\0'};
+    FILE *fp=NULL;
 	u_int8_t mcastaddr[] = LLDP_MULTICAST_ADDR;
 #ifdef ENABLE_DOT1
 	const u_int8_t dot1[] = LLDP_TLV_ORG_DOT1;
@@ -83,21 +96,67 @@ lldp_send(struct lldpd *global,
 	port = &hardware->h_lport;
 	chassis = port->p_chassis;
 	length = hardware->h_mtu;
-	if ((packet = (u_int8_t*)malloc(length)) == NULL)
+    if(strcmp(port->p_descr,LAN_INTERFACE)==0)
+    {
+        cputag[0]=0x88;
+        cputag[1]=0x99;
+        cputag[2]=0x04;
+        cputag[3]=0x00;
+        cputag[4]=0x00;
+        cputag[5]=0x00;
+        cputag[6]=0x00;
+        cputag[7]=0x00;
+
+        for(j=1;j<=4;j++)
+        {
+          sprintf(cmd,"uci get lldpd.config.lan%d",j);
+          fp=popen(cmd,"r");
+        if(fgets(var, sizeof(var), fp) == NULL)
+        {
+         printf("fgets failed\n");
+         pclose(fp);
+         return -1;
+        }
+        pclose(fp);
+        if((strcmp(var,"1") == 0) && (j==4))
+            cputag[7]=cputag[7] | 0x10;
+        else if((strcmp(var,"1") == 0) && (j==3))
+            cputag[7]=cputag[7] | 0x08;
+        else if((strcmp(var,"1") == 0) && (j==2))
+            cputag[7]=cputag[7] | 0x04;
+        else if((strcmp(var,"1") == 0) && (j==1))
+            cputag[7]=cputag[7] | 0x02;
+
+        }
+    }
+	
+    if ((packet = (u_int8_t*)malloc(length)) == NULL)
 		return ENOMEM;
 	memset(packet, 0, length);
 	pos = packet;
 
 	/* Ethernet header */
+   if(strcmp(port->p_descr,LAN_INTERFACE)==0)
+   {
 	if (!(
 	      /* LLDP multicast address */
 	      POKE_BYTES(mcastaddr, sizeof(mcastaddr)) &&
 	      /* Source MAC address */
-	      POKE_BYTES(&hardware->h_lladdr, sizeof(hardware->h_lladdr)) &&
+	      POKE_BYTES(&hardware->h_lladdr, sizeof(hardware->h_lladdr)) && POKE_BYTES(cputag, CPUTAGLEN) && 
 	      /* LLDP frame */
 	      POKE_UINT16(ETHERTYPE_LLDP)))
 		goto toobig;
-
+    }
+   else {
+    if (!(
+        /* LLDP multicast address */
+         POKE_BYTES(mcastaddr, sizeof(mcastaddr)) &&
+         /* Source MAC address */
+         POKE_BYTES(&hardware->h_lladdr, sizeof(hardware->h_lladdr)) &&
+        /* LLDP frame */
+         POKE_UINT16(ETHERTYPE_LLDP)))
+         goto toobig;
+   }
 	/* Chassis ID */
 	if (!(
 	      POKE_START_LLDP_TLV(LLDP_TLV_CHASSIS_ID) &&
@@ -480,6 +539,7 @@ lldp_decode(struct lldpd *cfg, char *fra
 	int tlv_size, tlv_type, tlv_subtype;
 	u_int8_t *pos, *tlv;
 	char *b;
+	char PORT_DETAILS[8]= {0};
 #ifdef ENABLE_DOT1
 	struct lldpd_vlan *vlan;
 	int vlan_len;
@@ -488,6 +548,12 @@ lldp_decode(struct lldpd *cfg, char *fra
 #endif
 	struct lldpd_mgmt *mgmt;
 	int af;
+    int portno=0;
+    char cmd[64]={'\0'};
+    char var[2]={'\0'};
+    FILE *fp=NULL;
+    
+
 	u_int8_t addr_str_length, addr_str_buffer[32];
 	u_int8_t addr_family, addr_length, *addr_ptr, iface_subtype;
 	u_int32_t iface_number, iface;
@@ -507,6 +573,27 @@ lldp_decode(struct lldpd *cfg, char *fra
 	TAILQ_INIT(&port->p_ppvids);
 	TAILQ_INIT(&port->p_pids);
 #endif
+    /* Decapsulate VLAN frames */
+    if (((struct ethhdr*)frame)->h_proto == htons(CPUTAGPROTOCOL)) {
+          portno=frame[PORTOFFSET];
+          memmove(frame+CPUTAGLEN,frame,2*ETH_ALEN);
+          frame=frame+CPUTAGLEN;
+          s=s-CPUTAGLEN;
+        
+        sprintf(cmd,"uci get lldpd.config.lan%d",portno);
+        fp=popen(cmd,"r");
+        if(fgets(var, sizeof(var), fp) == NULL)
+          {
+            printf("fgets failed\n");
+            pclose(fp);
+            return -1;
+           }
+        pclose(fp);
+        if(strcmp(var,"1") !=0)
+        {
+          goto malformed;
+        }
+     }
 
 	length = s;
 	pos = (u_int8_t*)frame;
@@ -585,6 +672,23 @@ lldp_decode(struct lldpd *cfg, char *fra
 			chassis->c_ttl = PEEK_UINT16;
 			break;
 		case LLDP_TLV_PORT_DESCR:
+            if (tlv_size < 1) {
+                    LLOG_DEBUG("empty tlv received on %s",
+                                         hardware->h_ifname);
+                 break;
+            }
+            if ((b = (char *)calloc(1, tlv_size + 1 + 7)) == NULL) {
+                LLOG_WARN("unable to allocate memory for string tlv "
+                                "received on %s",
+                                 hardware->h_ifname);
+                goto malformed;
+            }
+            PEEK_BYTES(b, tlv_size);
+	    snprintf (PORT_DETAILS, sizeof (PORT_DETAILS)," port=%d",portno);	    
+	    strcat (b, PORT_DETAILS);
+            port->p_descr = b;
+            LLOG_INFO("port description %s",port->p_descr);
+            break;
 		case LLDP_TLV_SYSTEM_NAME:
 		case LLDP_TLV_SYSTEM_DESCR:
 			if (tlv_size < 1) {
--- a/src/interfaces.c	2015-11-10 14:32:26.912293692 +0530
+++ b/src/interfaces.c	2015-11-10 14:36:23.600293663 +0530
@@ -58,30 +58,34 @@
                 (ether dst 00:e0:2b:00:00:00)"
 */
 
-#define LLDPD_FILTER_F				\
-	{ 0x30, 0, 0, 0x00000000 },		\
-	{ 0x54, 0, 0, 0x00000001 },		\
-	{ 0x15, 0, 14, 0x00000001 },		\
-	{ 0x28, 0, 0, 0x0000000c },		\
-	{ 0x15, 0, 4, 0x000088cc },		\
-	{ 0x20, 0, 0, 0x00000002 },		\
-	{ 0x15, 0, 2, 0xc200000e },		\
-	{ 0x28, 0, 0, 0x00000000 },		\
-	{ 0x15, 12, 13, 0x00000180 },		\
-	{ 0x20, 0, 0, 0x00000002 },		\
-	{ 0x15, 0, 2, 0x52cccccc },		\
-	{ 0x28, 0, 0, 0x00000000 },		\
-	{ 0x15, 8, 9, 0x000001e0 },		\
-	{ 0x15, 1, 0, 0x0ccccccc },		\
-	{ 0x15, 0, 2, 0x81000100 },		\
-	{ 0x28, 0, 0, 0x00000000 },		\
-	{ 0x15, 4, 5, 0x00000100 },		\
-	{ 0x20, 0, 0, 0x00000002 },		\
-	{ 0x15, 0, 3, 0x2b000000 },		\
-	{ 0x28, 0, 0, 0x00000000 },		\
-	{ 0x15, 0, 1, 0x000000e0 },		\
-	{ 0x6, 0, 0, 0x0000ffff },		\
-	{ 0x6, 0, 0, 0x00000000 },
+#define LLDPD_FILTER_F      \
+{ 0x30, 0, 0, 0x00000000 }, \
+{ 0x54, 0, 0, 0x00000001 }, \
+{ 0x15, 0, 12, 0x00000001 },\
+{ 0x28, 0, 0, 0x0000000c },\
+{ 0x15, 0, 2, 0x000088cc },\
+{ 0x20, 0, 0, 0x00000002 },\
+{ 0x15, 16, 0, 0xc200000e },\
+{ 0x20, 0, 0, 0x00000002 },\
+{ 0x15, 0, 2, 0x52cccccc },\
+{ 0x28, 0, 0, 0x00000000 },\
+{ 0x15, 14, 8, 0x000001e0 },\
+{ 0x15, 1, 0, 0x0ccccccc },\
+{ 0x15, 0, 2, 0x81000100 },\
+{ 0x28, 0, 0, 0x00000000 },\
+{ 0x15, 10, 4, 0x00000100 },\
+{ 0x20, 0, 0, 0x00000002 },\
+{ 0x15, 0, 2, 0x2b000000 },\
+{ 0x28, 0, 0, 0x00000000 },\
+{ 0x15, 6, 0, 0x000000e0 },\
+{ 0x28, 0, 0, 0x0000000c },\
+{ 0x15, 0, 5, 0x00008899 },\
+{ 0x20, 0, 0, 0x00000002 },\
+{ 0x15, 0, 3, 0xc200000e },\
+{ 0x28, 0, 0, 0x00000000 },\
+{ 0x15, 0, 1, 0x00000180 },\
+{ 0x6, 0, 0, 0x0000ffff },\
+{ 0x6, 0, 0, 0x00000000 },
 
 static struct sock_filter lldpd_filter_f[] = { LLDPD_FILTER_F };
 
